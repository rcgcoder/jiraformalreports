{
  "properties": {
    "description": {
      "maxLength": 1400,
      "type": "string",
      "fieldDescription": "\n\nA human readable description of what the add-on does. The description will be visible in the `Manage Add-ons`\n section of the administration console. Provide meaningful and identifying information for the instance administrator.\n\n"
    },
    "modules": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "keyboardShortcuts": {
          "items": {
            "properties": {
              "shortcut": {
                "pattern": "[a-z]{1,3}",
                "type": "string",
                "fieldDescription": "\n\nThe shortcut sequence. The current limitations are\n\n <ul>\n     <li>the sequence cannot shadow an existing product shortcut</li>\n     <li>can only contain lowercase letters</li>\n     <li>has to be shorter than 4 characters</li>\n </ul>\n\n"
              },
              "context": {
                "enum": [
                  "global",
                  "GLOBAL",
                  "issue_navigation",
                  "ISSUE_NAVIGATION",
                  "issue_action",
                  "ISSUE_ACTION",
                  "agile_board",
                  "AGILE_BOARD"
                ],
                "type": "string",
                "fieldDescription": "\n\nThe context in which the shortcut will be available. This is optional, if not given the shortcut is assumed to be global.\n Different products define different contexts.\n\n Jira supported contexts:\n <ul>\n     <li>global</li>\n     <li>issue&#95;navigation</li>\n     <li>issue&#95;action</li>\n     <li>agile&#95;board</li>\n </ul>\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA human readable name.\n\n"
              },
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string",
                "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
              },
              "target": {
                "properties": {
                  "key": {
                    "pattern": "^[a-zA-Z0-9-]+$",
                    "type": "string",
                    "fieldDescription": "\n\nThe key of the target module, defined in the add-on descriptor.\n\n"
                  }
                },
                "required": [
                  "key"
                ],
                "shortClassName": "keyboardShortcutTargetBean",
                "type": "object",
                "title": "Keyboard Shortcut Target",
                "description": "\n\nThe bean containing the key of the target module of the shortcut.\n\n",
                "fieldDescription": "\n\nThe target must be the key of another module defined by the add-on.\n\n Below are the actions which will be executed by the shortcut depending on the module type of the target.\n\n <ul>\n  <li>General Page: Navigates to the general page</li>\n  <li>Dialog: Opens the dialog</li>\n  <li>Web Item: Emulates clicking on the web item, which must be present on the current page</li>\n </ul>\n\n"
              }
            },
            "required": [
              "shortcut",
              "name",
              "key",
              "target"
            ],
            "shortClassName": "keyboardShortcutModuleBean",
            "type": "object",
            "title": "Keyboard Shortcut",
            "description": "\n\nThis module type adds the ability for an add-on to declare keyboard shortcuts.\n Currently only available for Jira.\n <p>\n A Connect keyboard shortcut can perform one of three actions:\n navigate to a page, open a dialog module, or invoke an action represented by a web-item on a page.\n Pages, dialog modules and web-items referenced by the shortcut must be declared by the same add-on.\n\n A shortcut is identified by a sequence of letters which need to be pressed in order for the shortcut action to be invoked.\n You cannot declare shortcuts that would shadow shortcuts defined by the product.\n A shortcut shadows all shortcuts which start with its sequence.\n\n On the other hand, it's possible to shadow shortcuts defined by the same or other add-ons, although those won't\n be accessible anymore.\n\n In case multiple shortcuts have the same sequence, there is no guarantee on which will be invoked.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"keyboardShortcuts\": [\n          {\n            \"shortcut\": \"gmm\",\n            \"target\": {\n              \"key\": \"page-key\"\n            },\n            \"context\": \"global\",\n            \"name\": {\n              \"value\": \"My keyboard shortcut\"\n            },\n            \"key\": \"keyboard-shortcut-key\"\n          }\n        ]\n      }\n    }\n\n\n"
          },
          "type": "array"
        },
        "adminPages": {
          "items": {
            "$ref": "#/definitions/pageModule"
          },
          "type": "array"
        },
        "webPanels": {
          "items": {
            "$ref": "#/definitions/webPanel"
          },
          "type": "array"
        },
        "webhooks": {
          "items": {
            "$ref": "#/definitions/webhook"
          },
          "type": "array"
        },
        "postInstallPage": {
          "$ref": "#/definitions/pageModule"
        },
        "webSections": {
          "items": {
            "$ref": "#/definitions/webSection"
          },
          "type": "array"
        },
        "generalPages": {
          "items": {
            "$ref": "#/definitions/pageModule"
          },
          "type": "array"
        },
        "webItems": {
          "items": {
            "$ref": "#/definitions/webItem"
          },
          "type": "array"
        },
        "configurePage": {
          "$ref": "#/definitions/pageModule"
        },
        "dialogs": {
          "items": {
            "$ref": "#/definitions/dialog"
          },
          "type": "array"
        },
        "blueprints": {
          "items": {
            "properties": {
              "template": {
                "properties": {
                  "blueprintContext": {
                    "properties": {
                      "url": {
                        "format": "uri",
                        "type": "string",
                        "fieldDescription": "\n\nA URL to which a POST request will be made during the rendering of the blueprint (see <a href=\"#POSTBODYEXAMPLE\">'Example of the request POST body' below</a> for an example\n of what will be POSTed to this resource). The response is then used for blueprint variable substitution, to enable\n blueprints to create pages that have dynamic content.\n <br>\n <h3>Expected response format</h3>\n The expected response from the context URL is a JSON array of objects with certain fields:\n\n\n\n\n\n    [\n      {\n        \"identifier\": \"ContentPageTitle\",\n        \"value\": \"Unique Page Title 1\",\n        \"representation\": \"plain\"\n      },\n      {\n        \"identifier\": \"custom-key1\",\n        \"value\": \"custom value 1\",\n        \"representation\": \"plain\"\n      },\n      {\n        \"identifier\": \"custom-key2\",\n        \"value\": \"<ac:structured-macro ac:name=\\\"cheese\\\" ac:schema-version=\\\"1\\\"/> \",\n        \"representation\": \"storage\"\n      }\n    ]\n\n\n\n\n <h3 id=\"IDENTIFIERFIELD\">The <code>identifier</code> field</h3>\n The <code>identifier</code> field refers to the <code>name</code> attribute of the <code>var</code> element in a blueprint\n template. If the <code>identifier</code> is matched with a template variable, the <code>value</code> is used in the substitution.\n If a template contains a variable, but there is no matching <code>identifier</code> in the context, an error is generated.\n An identifier with no matching template variable is regarded as a no-op.\n\n The <code>identifier</code> field for each context object must be unique. It is an error to have more than one context object with\n the same identifier, and it is undefined which will get picked during substitution.\n\n\n Some <code>identifier</code> names are reserved for use with special meaning during substitution. They\n must have a <code>representation</code> field with the value <code>plain</code>. The list below describes the meaning\n of each existing reserved identifier.\n\n <ul>\n     <li>\n         <code>ContentPageTitle</code>: allows the blueprint template to set the page title. It must not contain any\n          characters that cannot be used as a Confluence page title. If this reserved <code>identifier</code> is not\n          found in the context, the page created from the blueprint will not have a title set and\n          will require the user to set it before it can be saved. The blueprint module must also specify\n          'edit' as the value of the <code>createResult</code> field in this case. Note: the capital 'C'\n          in the name is not a mistake or typo.\n     </li>\n     <li>\n         <code>labelString</code>: A space separated list of labels. The labels will be added to the page being created\n         by this blueprint. See <a href=\"https://confluence.atlassian.com/display/doc/Add%2C+Remove+and+Search+for+Labels\">\n             the Confluence docs about labels</a> for more information.\n     </li>\n </ul>\n Using reserved identifiers as part of your template is possible, but these identifiers may change in the future, so\n best practice is to only use non-reserved identifiers in your template. See <a href=\"#BACKWARDSCOMPATIBILITY\">Backwards compatibility</a>\n for more information on <code>identifier</code>s.\n\n <h3>The <code>representation</code> field</h3>\n\n The <code>representation</code> field must be one of the following values. If unset, it will default to <code>plain</code>.\n <ul>\n     <li><code>plain</code></li>\n     <li><code>wiki</code></li>\n     <li><code>storage</code></li>\n </ul>\n\n <h3>The <code>value</code> field</h3>\n\n The <code>value</code> field must be in the same format as the <code>representation</code> field.\n If the format is incorrect (such as mismatched tags in <code>storage</code> format), an error message will be displayed\n in the resulting page. Here's an explanation of what each format means:\n\n <ul>\n     <li>\n         <code>plain</code>: Plain text, which is HTML escaped during variable substitution. Use this for simple textual substitution.\n     </li>\n     <li>\n         <code>wiki</code>: Valid <a href=\"https://confluence.atlassian.com/display/DOC/Confluence+Wiki+Markup\">\n         Confluence Wiki Markup</a>. The wiki markup will be rendered into html during substitution into the page.\n         The resulting page will not contain any wiki markup. Use this format when simple styling\n         is required (such as emphasis, underlines or and tables etc).\n     </li>\n     <li>\n         <code>storage</code>: Valid <a href=\"http://confluence.atlassian.com/display/DOC/Confluence+Storage+Format\">\n             Confluence Storage Format</a>. This value is substituted into the page directly, before the page is rendered. Use this format\n             to insert Confluence macros dynamically as part of your blueprint. See <a href=\"https://confluence.atlassian.com/display/DOC/Macros\">Macros</a>\n             for a list of available Confluence macros, including storage format examples.\n     </li>\n </ul>\n\n\n <h3 id=\"POSTBODYEXAMPLE\">Example of the request POST body</h3>\n The context url may need some information to produce a more individually suitable response. Confluence\n will send some information related to the blueprint in the body of the request during the creation process.\n Here's an example of what will be sent in the body of the POST request:\n\n\n\n\n\n    {\n      \"addonKey\": \"addon-key\",\n      \"blueprintKey\": \"blueprint-key\",\n      \"spaceKey\": \"SPACEKEY\",\n      \"userKey\": \"edd16ba6-0d41-4313-8bb9-84dc82cf6e7c\",\n      \"userLocale\": \"fr_FR\"\n    }\n\n\n\n <ul>\n     <li><code>addonKey</code>: the key of the add-on that the blueprint is part of.</li>\n     <li><code>blueprintKey</code>: the key of the blueprint that triggered this context request.</li>\n     <li><code>spaceKey</code>: the space to create the page in (this is selected by the user in the Create dialog).</li>\n     <li><code>userKey</code>: the user key of the user creating the page from blueprint.</li>\n     <li><code>userLocale</code>: the locale of the user creating the page from blueprint.</li>\n </ul>\n\n"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "shortClassName": "blueprintTemplateContextBean",
                    "type": "object",
                    "title": "Blueprint Template Context",
                    "description": "\n\nDefines the context of the blueprint template.\n\n\n\n\n\n    {\n      \"template\": {\n        \"url\": \"/blueprints/blueprint.xml\",\n        \"blueprintContext\": {\n          \"url\": \"/blueprints/context\"\n        }\n      }\n    }\n\n\n\n\n A blueprint template is static - the same template will produce the same Confluence page. To produce Confluence\n pages dynamically (to create a different page for a different user), the template needs to\n use variable substitution to produce the dynamic parts. Variable substitution requires the add-on to provide data\n for substitution. Collectively, this data is called the context for substitution.\n\n The context is made up of a list of objects which are retrieved from the context url specified by the blueprint\n context <code>url</code> field in this module descriptor. See <a href=\"#IDENTIFIERFIELD\">Properties</a> for the definition of each field in the context.\n\n <h3>Substituting dynamic variables in a blueprint</h3>\n\n Let's say we have a blueprint template module <code>/blueprints/blueprint.xml</code>:\n <pre><code>&lt;h2 id=&quot;static1&quot;&gt;Hello Blueprint&lt;/h2&gt;\n&lt;h2 id=&quot;custom1&quot;&gt;&lt;at:var at:name=&quot;ContentPageTitle&quot;/&gt;&lt;/h2&gt;\n&lt;h2 id=&quot;custom2&quot;&gt;&lt;at:var at:name=&quot;custom-key1&quot;/&gt;&lt;/h2&gt;\n&lt;h2 id=&quot;custom3&quot;&gt;&lt;at:var at:rawxhtml=&quot;true&quot; at:name=&quot;custom-key2&quot;/&gt;&lt;/h2&gt;\n</code></pre>\n\n And an add-on server resource <code>/blueprints/context</code> which returns this JSON response as the context:\n\n\n\n\n\n    [\n      {\n        \"identifier\": \"ContentPageTitle\",\n        \"value\": \"Unique Page Title 1\",\n        \"representation\": \"plain\"\n      },\n      {\n        \"identifier\": \"custom-key1\",\n        \"value\": \"custom value 1\",\n        \"representation\": \"plain\"\n      },\n      {\n        \"identifier\": \"custom-key2\",\n        \"value\": \"<ac:structured-macro ac:name=\\\"cheese\\\" ac:schema-version=\\\"1\\\"/> \",\n        \"representation\": \"storage\"\n      }\n    ]\n\n\n\n\n During blueprint page creation, Confluence sends a POST request to <code>/blueprints/context</code> to retrieve\n the context. The context retrieved is parsed as a JSON array of objects and used in the substitute of\n the variables in the blueprint template above (<code>custom-key1</code>, <code>custom-key2</code> are the variables).\n\n The final, variable substituted, storage format will look like this:\n <pre><code>&lt;h2&gt;Hello Blueprint&lt;/h2&gt;\n&lt;h2&gt;Unique Page Title 1&lt;/h2&gt;\n&lt;h2&gt;custom value 1&lt;/h2&gt;\n&lt;h2&gt;&lt;ac:structured-macro ac:name=&quot;cheese&quot; ac:schema-version=&quot;1&quot; /&gt;&lt;/h2&gt;\n</code></pre>\n\n This is then used as the Confluence page to be saved to the database and displayed to the user according to the\n <code>createResult</code> field of the blueprint module (see <a href=\"../blueprint-template/\">Blueprint Template Module</a>).\n\n An error message appears in the Content Create Dialog if Confluence has any problems accessing the blueprint\n template or context URL (for example if your add-on server failed to respond in 10 seconds or the JSON\n returned is invalid). A detailed error and/or stacktrace may be accessible by Atlassian support, but the end user will see an\n error like the one shown here:\n <img src=\"/cloud/connect/images/confluence-blueprint-context-error.png\" alt=\"Blueprint context error\" width=\"80%\" style=\"border:1px solid #999;margin-top:10px;\">\n\n <h3 id=\"BACKWARDSCOMPATIBILITY\">Backwards compatibility of the <code>identifier</code> field</h3>\n A blueprint template containing variables may change as the add-on evolves over time. However, because end users\n can customize blueprint templates, it's possible for the customized version of the template to differ from\n the version in the add-on. This difference won't cause an error as long as the variables used in the template are\n still being returned as part of the context url.\n\n Add-ons wanting to retain backwards compatibility for their blueprint templates should ensure that any variables\n used in a template are always returned in the context url, even if a new version of the blueprint template no\n longer uses it (for example if users are relying on an old or customized version of the template). This ensures that the template\n continues to function when the add-on updates the template.\n\n",
                    "fieldDescription": "\n\nDefines the add-on server endpoint that provides the JSON objects used for substituting variables in the blueprint template.\n\n\n For more information on defining variables in blueprint templates, check out the examples in\n <a href=\"../blueprint-template-context/\">Blueprint Template Context</a>.\n\n"
                  },
                  "url": {
                    "format": "uri",
                    "type": "string",
                    "fieldDescription": "\n\nThe URL of the add-on resource that provides the blueprint template content. This URL has to be relative\n to the add-on base URL.\n\n"
                  }
                },
                "required": [
                  "url"
                ],
                "shortClassName": "blueprintTemplateBean",
                "type": "object",
                "title": "Blueprint Template",
                "description": "\n\nDefines where the blueprint template is located and the context for variable substitution.\n\n\n\n\n\n    {\n      \"template\": {\n        \"url\": \"/blueprints/blueprint.xml\",\n        \"blueprintContext\": {\n          \"url\": \"/blueprints/context\"\n        }\n      }\n    }\n\n\n",
                "fieldDescription": "\n\nDefines where the blueprint template is located and the context for variable substitution.<br>\n For more about how to define variables in blueprint template and template context please follow the example in\n <a href=\"../blueprint-template-context/\">Blueprint Template Context</a>.\n\n"
              },
              "icon": {
                "$ref": "#/definitions/icon",
                "fieldDescription": "\n\nDefines an icon for this Blueprint, to be shown in the Create Content dialog.\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA human readable name.\n\n"
              },
              "description": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nDefines a short description for this Blueprint, to be shown in the Create Content dialog.\n\n"
              },
              "createResult": {
                "enum": [
                  "edit",
                  "EDIT",
                  "view",
                  "VIEW"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines the screen to go to when creating this type of Blueprint. A value of `view` causes Confluence to bypass the\n editor page and automatically create the page content. The user lands in the view of the created page. When `edit`,\n the user is sent to the editor which is pre-filled with the template content.\n\n",
                "defaultValue": "edit"
              },
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string",
                "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
              }
            },
            "required": [
              "template",
              "name",
              "key"
            ],
            "shortClassName": "blueprintModuleBean",
            "type": "object",
            "title": "Blueprint",
            "description": "\n\nBlueprints allow your connect add on to provide content creation templates.\n\n\n\n\n\n    {\n      \"modules\": {\n        \"blueprints\": [\n          {\n            \"template\": {\n              \"url\": \"/blueprints/blueprint.xml\",\n              \"blueprintContext\": {\n                \"url\": \"/blueprints/context\"\n              }\n            },\n            \"createResult\": \"edit\",\n            \"description\": {\n              \"value\": \"This is a description.\"\n            },\n            \"icon\": {\n              \"width\": 48,\n              \"height\": 48,\n              \"url\": \"/my-blueprint-icon.png\"\n            },\n            \"name\": {\n              \"value\": \"Simple Remote Blueprint\"\n            },\n            \"key\": \"remote-blueprint\"\n          }\n        ]\n      }\n    }\n\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nBlueprints allow your connect add on provide content creation templates.\n\n"
        },
        "spaceToolsTabs": {
          "items": {
            "$ref": "#/definitions/spaceTools"
          },
          "type": "array",
          "fieldDescription": "\n\nThe Space Tools Tab module allows you to add new tabs to the Space Tools area of Confluence.\n\n"
        },
        "confluenceContentProperties": {
          "items": {
            "properties": {
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA human readable name.\n\n"
              },
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string",
                "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
              },
              "keyConfigurations": {
                "items": {
                  "properties": {
                    "propertyKey": {
                      "type": "string",
                      "fieldDescription": "\n\nThe key of the property from which the data is indexed. Only alphanumeric characters are allowed,\n and it must be globally unique. Prefixing it with the name of your add-on is the best way to ensure this.\n\n"
                    },
                    "extractions": {
                      "items": {
                        "properties": {
                          "uiSupport": {
                            "$ref": "#/definitions/uiSupport",
                            "fieldDescription": "\n\n<code>uiSupport</code> can be used to define how your aliased field will be displayed in the CQL query builder.\n By defining <code>uiSupport</code>, your content property will appear in the CQL query builder for all macros and search\n features built on CQL. For example, your property will become usable in the\n <a href=\"https://confluence.atlassian.com/doc/content-by-label-macro-145566.html\">Content By Label macro</a>, and\n filterable by users on the Confluence search screen.\n\n Note: You need to define an <code>alias</code> to use <code>uiSupport</code>.\n\n"
                          },
                          "objectName": {
                            "type": "string",
                            "fieldDescription": "\n\nThe <code>objectName</code> of the JSON data which should be indexed. The objectName is the key of a flattened JSON object with '.' as the path separator.\n\n For instance, for JSON <code>\"{\"label\": {\"color\": \"red\", \"text\":\"connect\"}}</code> the valid objectName\n referencing the color is label.color.\n\n Currently, specifying indexes for JSON arrays is not supported.\n\n"
                          },
                          "alias": {
                            "type": "string",
                            "fieldDescription": "\n\nA CQL field name alias for this content property.\n\n By defining an alias you are exposing it to CQL and allow other macros and search features to easily use\n your content property in their search.\n\n <strong>Important:</strong> Aliases must be globally unique. Prefixing it with the name of your add-on is the best way to ensure this.\n\n"
                          },
                          "type": {
                            "enum": [
                              "number",
                              "NUMBER",
                              "string",
                              "STRING",
                              "text",
                              "TEXT",
                              "date",
                              "DATE"
                            ],
                            "type": "string",
                            "fieldDescription": "\n\nThe type of the referenced value.\n\n The type can be one of the following values:\n\n * <code>number</code> - The extracted number will be indexed as a double value for efficient range filtering and sorting.\n * <code>text</code> - The extracted value will be tokenized before indexing, allowing searching for particular words.\n * <code>string</code> - The entire extracted value will be indexed as a single token, without any filtering. When the extraction\n expression evaluates to a JSON array, each element will be indexed separately. This Enables searching for an exact value, e.g. a unique identifier.\n * <code>date</code> - Two representations are possible: either a string following the ISO 8601 datetime format,\n or a long value in Unix time. This enables efficient range filtering and sorting.\n\n"
                          }
                        },
                        "required": [
                          "objectName",
                          "type"
                        ],
                        "shortClassName": "contentPropertyIndexExtractionConfigurationBean",
                        "type": "object",
                        "title": "Content Property Index Extraction Configuration",
                        "description": "\n\nAn extraction recipe for a single value within a content property JSON object.\n\n An extraction recipe defines which values within your JSON content property will be added to the search\n index and made available to CQL queries as a field.  This can allow you to track custom information\n and make it look like a simple field on the content object.\n\n You can further extend the field definition by including\n <a href=\"../user-interface-support/\">UI support</a>.\n\n See the <a href=\"../content-property-index-key-configuration/\">content property key</a> documentation for\n a complete example.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"objectName\": \"attachment.type\",\n      \"type\": \"string\",\n      \"alias\": \"contentType\",\n      \"uiSupport\": {\n        \"defaultOperator\": \"~\",\n        \"name\": {\n          \"value\": \"Content Type\",\n          \"i18n\": \"attachment.type.name\"\n        },\n        \"tooltip\": {\n          \"value\": \"Content Type Tooltip\",\n          \"i18n\": \"attachment.type.tooltip\"\n        },\n        \"dataUri\": \"/data/content-types\",\n        \"valueType\": \"string\"\n      }\n    }\n\n\n"
                      },
                      "type": "array",
                      "fieldDescription": "\n\nThe list with references to values of JSON objects which will be indexed and the types of referenced values.\n\n"
                    }
                  },
                  "required": [
                    "propertyKey",
                    "extractions"
                  ],
                  "shortClassName": "contentPropertyIndexKeyConfigurationBean",
                  "type": "object",
                  "title": "Content Property Index Key Configuration",
                  "description": "\n\nA Content Property Index Key Configuration defines which values from your JSON content property\n object should be indexed by Confluence and made available to the CQL search syntax.\n\n Each content property key will define one or more\n <a href=\"../content-property-index-extraction-configuration/\">extractions</a> which will\n allow for multiple values from your JSON content property to be used in CQL. Each extraction defines a single field\n that will be queryable using the relevant CQL syntax as seen below.\n\n In the <a href=\"https://bitbucket.org/mjensen/wordcount\">wordcount</a> example, we store details of the page\n that describe the word and character counts.\n\n After storing this JSON object as a content property:\n\n <pre><code>\n {\n     \"wordCount\": 5\n     \"characterCount\": 22\n }\n </code></pre>\n\n We then define a series of extractions to allow access to the 'wordCount' and 'characterCount'\n properties.\n\n <pre><code>\n {\n   \"propertyKey\": \"wordcount_addon\",\n   \"extractions\": [\n     { \"objectName\": \"wordCount\", \"type\": \"number\" },\n     { \"objectName\": \"characterCount\", \"type\": \"number\" }\n   ]\n }\n </code></pre>\n\n You can access this property in your CQL queries as:\n\n <pre><code>\n space = currentSpace() and content.property[wordcount_addon].wordCount &lt;= 1000\n </code></pre>\n\n This is constructed using the following:\n\n <pre><code>\n content.property[<strong>propertyKey</strong>].<strong>objectName</strong>\n </code></pre>\n\n You can simplify the CQL syntax even further by defining an alias for the extraction:\n\n <pre><code>\n {\n   \"propertyKey\": \"wordcount_addon\",\n   \"extractions\": [\n     { \"objectName\": \"wordCount\", \"type\": \"number\", alias: \"wordcount\" }\n   ]\n }\n </code></pre>\n\n This allows you to refer to your data using the alias:\n\n <pre><code>\n space = currentSpace() and wordcount &lt;= 1000\n </code></pre>\n\n <strong>Important:</strong> the <code>alias</code> must also be globally unique. Prefixing it with the name of your\n add-on is the best way to ensure this.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"propertyKey\": \"attachment\",\n      \"extractions\": [\n        {\n          \"objectName\": \"attachment.size\",\n          \"type\": \"number\"\n        },\n        {\n          \"objectName\": \"attachment.type\",\n          \"type\": \"string\",\n          \"alias\": \"contentType\",\n          \"uiSupport\": {\n            \"defaultOperator\": \"~\",\n            \"name\": {\n              \"value\": \"Content Type\",\n              \"i18n\": \"attachment.type.name\"\n            },\n            \"tooltip\": {\n              \"value\": \"Content Type Tooltip\",\n              \"i18n\": \"attachment.type.tooltip\"\n            },\n            \"dataUri\": \"/data/content-types\",\n            \"valueType\": \"string\"\n          }\n        },\n        {\n          \"objectName\": \"attachment.updated\",\n          \"type\": \"date\"\n        }\n      ]\n    }\n\n\n"
                },
                "type": "array",
                "fieldDescription": "\n\nA Content Property Index Key Configuration defines which values from your JSON content property\n object should be indexed and made available to the CQL search syntax.\n\n"
              }
            },
            "required": [
              "name",
              "key"
            ],
            "shortClassName": "contentPropertyModuleBean",
            "type": "object",
            "title": "Content Property",
            "description": "\n\nThe purpose of this module is to make the data inside content properties available to CQL search so that add-on vendors\n can search for content they have set data on via CQL.\n\n Content properties are one of the forms of persistence available for Confluence Connect add-ons, allowing you\n to store key-value pairs against a piece of content, where the value must be well formed JSON. Content Properties are\n stored as JSON objects, and allow you to track extra information that your add-on needs, without the use of a\n backing data-store. Values from these JSON objects can be extracted, indexed and made available to CQL queries.\n\n <h3>Using Content Properties</h3>\n\n To start creating and manipulating content properties, you don't need to declare anything in your descriptor. Just use the\n <a href=\"https://developer.atlassian.com/display/CONFDEV/Content+Properties+in+the+REST+API\">REST API</a> to\n store your JSON data against a piece of content.\n\n To <a href=\"../content-property-index-key-configuration/\">integrate with search</a>, you'll need to define some\n <a href=\"../content-property-index-extraction-configuration/\">extractions</a> to declare what fields and nested data you want to be\n indexable by Confluence. You can also optionally define an <a href=\"../content-property-index-key-configuration/#alias\">alias</a>\n for simpler CQL querying, and <a href=\"../user-interface-support/\">UI support</a> for your fields to be filterable by\n users on the search screen and in the CQL query builder.\n\n Once you've done that, you can use <a href=\"https://developer.atlassian.com/display/CONFDEV/Advanced+Searching+using+CQL\">CQL</a>\n to query content based on your custom content property.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"confluenceContentProperties\": [\n        {\n          \"keyConfigurations\": [\n            {\n              \"propertyKey\": \"attachment\",\n              \"extractions\": [\n                {\n                  \"objectName\": \"attachment.size\",\n                  \"type\": \"number\"\n                },\n                {\n                  \"objectName\": \"attachment.type\",\n                  \"type\": \"string\",\n                  \"alias\": \"contentType\",\n                  \"uiSupport\": {\n                    \"defaultOperator\": \"~\",\n                    \"name\": {\n                      \"value\": \"Content Type\",\n                      \"i18n\": \"attachment.type.name\"\n                    },\n                    \"tooltip\": {\n                      \"value\": \"Content Type Tooltip\",\n                      \"i18n\": \"attachment.type.tooltip\"\n                    },\n                    \"dataUri\": \"/data/content-types\",\n                    \"valueType\": \"string\"\n                  }\n                },\n                {\n                  \"objectName\": \"attachment.updated\",\n                  \"type\": \"date\"\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"value\": \"Attachment Index Document\"\n          }\n        }\n      ]\n    }\n\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nDefinition of a content property index schema for an add-on. It allows extracting specific parts of the JSON\n documents stored as a content property values, and write them to a search index. Once stored,\n they can participate in a content search using CQL.\n\n"
        },
        "customContent": {
          "items": {
            "properties": {
              "uiSupport": {
                "$ref": "#/definitions/customContentUISupport",
                "fieldDescription": "\n\nDeclares information for rendering the custom content in the UI.\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA human readable name.\n\n"
              },
              "description": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe description of the custom content\n\n"
              },
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string",
                "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
              },
              "apiSupport": {
                "$ref": "#/definitions/apiSupport",
                "fieldDescription": "\n\nThis property allows you to specify the container types your custom content can appear in, and its supported child content types.\n It also allows you to enable indexing of your custom content.\n\n"
              }
            },
            "required": [
              "uiSupport",
              "name",
              "key",
              "apiSupport"
            ],
            "shortClassName": "customContentModuleBean",
            "type": "object",
            "title": "Custom Content",
            "description": "\n\n<p>You can declare custom content in Confluence, which behaves like built-in Confluence content types—page, blog post, or comment, for example.</p>\n <p>Custom content can be:</p>\n <ul>\n     <li>Created, retrieved, updated or deleted using the <a href=\"https://docs.atlassian.com/confluence/REST/latest/\">Confluence REST API</a>.</li>\n     <li>Indexed as a built-in content type and rendered in quick search and site-wide search. </li>\n     <li>Viewed in a customized viewer supplied by the add-on.</li>\n     <li>Listed in a content list page in a space or shown as a tab in page attachment screen.</li>\n     <li>Created from create dialog.</li>\n     <li>Created or edited via a customized UI supplied by the add-on.</li>\n </ul>\n\n You can also find a step by step tutorial series covering all the aspects of custom content here:\n <a href=\"/cloud/confluence/custom-content-with-confluence-connect/\" target=\"_blank\">Custom Content with Confluence Connect</a>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"customContent\": [\n          {\n            \"uiSupport\": {\n              \"contentViewComponent\": {\n                \"addonKey\": \"addon-key\",\n                \"moduleKey\": \"dialog-module-key\"\n              },\n              \"icons\": {\n                \"item\": {\n                  \"width\": 16,\n                  \"height\": 16,\n                  \"url\": \"/item.png\"\n                }\n              }\n            },\n            \"apiSupport\": {\n              \"bodyType\": \"storage\",\n              \"supportedContainerTypes\": [\n                \"space\",\n                \"page\"\n              ],\n              \"supportedChildTypes\": [\n                \"attachment\",\n                \"comment\"\n              ],\n              \"supportedSpacePermissions\": [],\n              \"preventDuplicateTitle\": false,\n              \"indexing\": {\n                \"enabled\": true\n              }\n            },\n            \"name\": {\n              \"value\": \"My Content Type Name\"\n            },\n            \"key\": \"my-custom-content\"\n          }\n        ]\n      }\n    }\n\n\n\n\n\n <h3>Create custom content via the Confluence REST API</h3>\n <p>The above snippet defines your custom content: <code>my-custom-content</code>.\n You can create a new piece of content with this type by posting the following JSON to the Confluence <code>/rest/api/content</code> endpoint.</p>\n <pre><code>\n {\n     \"type\":\"ac:my-addon-key:my-custom-content\",\n     \"title\":\"My content title\",\n     \"space\":{\n         \"key\":\"ds\"\n     },\n     \"body\":{\n         \"storage\":{\n             \"value\":\"This is my content body\",\n             \"representation\":\"storage\"\n         }\n     }\n }\n </code></pre>\n\n\n <h3 id=\"content-type-key\">The content type key</h3>\n <p>The content type key for custom content is defined in 3 parts:</p>\n <ul>\n     <li>\n         <code>ac</code><br>\n         This is always the same, indicating that this content type is defined in a Connect add-on.\n     </li>\n     <li>\n         <code>my-addon-key</code><br>\n         The key of the Connect add-on.\n     </li>\n     <li>\n         <code>my-custom-content</code><br>\n         The key of the module which defines the custom content.\n     </li>\n </ul>\n\n <h4>For example:</h4>\n <p>Content type key <code>ac:my-addon-key:my-custom-content</code> should be used for\n creating custom content that's defined in a Connect add-on with the key of <code>my-addon-key</code>\n and module key of <code>my-custom-content</code></p>\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nCustom content allow your Connect add-on to provide customized content types like builtin Page and BlogPost to Confluence.\n\n"
        },
        "dynamicContentMacros": {
          "items": {
            "$ref": "#/definitions/dynamicContentMacro"
          },
          "type": "array",
          "fieldDescription": "\n\nDynamic content macros allow you to add a macro into a Confluence page which is rendered as an iframe.\n\n"
        },
        "staticContentMacros": {
          "items": {
            "$ref": "#/definitions/staticContentMacro"
          },
          "type": "array",
          "fieldDescription": "\n\nStatic content macros allow you to add a macro into a Confluence page which is stored with the Confluence page\n itself. The add-on is responsible for generating the rendered XHTML in\n [Confluence Storage Format](https://confluence.atlassian.com/display/DOC/Confluence+Storage+Format)\n\n"
        },
        "profilePages": {
          "items": {
            "$ref": "#/definitions/pageModule"
          },
          "type": "array",
          "fieldDescription": "\n\nA User Profile Page module is used to add new elements to Confluence user profiles.\n\n"
        },
        "contentBylineItems": {
          "items": {
            "$ref": "#/definitions/contentBylineItems"
          },
          "type": "array",
          "fieldDescription": "\n\nByline modules allow your Connect add on to add dynamic content to the Confluence \"by-line\".\n\n"
        },
        "confluenceThemes": {
          "items": {
            "properties": {
              "routes": {
                "properties": {
                  "spaceview": {
                    "properties": {
                      "url": {
                        "format": "uri-template",
                        "type": "string",
                        "fieldDescription": "\n\nA url for displaying a given view. This url can be interpolated with a set of variables. See\n <a href=\"../theme-routes/\">Theme Routes</a> for a list of\n context parameters available.\n\n"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "shortClassName": "confluenceThemeRouteBean",
                    "type": "object",
                    "title": "Theme Route Definition",
                    "description": "\n\nDefines the data required for each individual route.\n\n The <code>url</code> field is a URL that is to be used as an iframe for the full page iframe rendered for the route.\n\n",
                    "fieldDescription": "\n\nRoute for the space homepage - the screen when a user views a space. Overriding\n this route will allow the add-on to customize what the user sees when they visit a space homepage.\n Available context parameters in the url are\n <ul>\n <li><code>space.key</code> - the space key of the content being viewed</li>\n </ul>\n\n"
                  }
                },
                "shortClassName": "confluenceThemeRouteInterceptionsBean",
                "type": "object",
                "title": "Theme Routes",
                "description": "\n\nDefines each of the routes that the Theme module should override.\n\n The <code>url</code> field of each individual <a href=\"../theme-route-definition/\">route definition</a>\n will be provided with context parameters for the particular route. For example, the <code>spaceview</code> route\n can have as a URL <code>/my-spaceview/{space.key}</code>,\n and the context parameter <code>space.key</code> is going to be replaced with the actual space key of the content being viewed.\n\n Below is a list of all possible routes, and the context parameters associated with the route.\n\n",
                "fieldDescription": "\n\nDefines what routes to override for this Theme.\n See <a href=\"../theme-routes/\">Theme Routes</a> for a description of each route,\n as well as the appropriate context parameters available for each route.\n\n"
              },
              "lookAndFeel": {
                "$ref": "#/definitions/lookAndFeel",
                "fieldDescription": "\n\nThe look and feel for the Theme\n\n"
              },
              "icon": {
                "$ref": "#/definitions/icon",
                "fieldDescription": "\n\nAn icon to display in the Theme selector in the Confluence administration screen. The icon will be resized to\n 110px wide and 70px high to fit inside the Theme selector.\n\n"
              },
              "routeOverride": {
                "type": "boolean",
                "fieldDescription": "\n\nA configuration to enable or disable route override. The default is true.\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA human readable name.\n\n"
              },
              "description": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nA description for the Theme. This will appear next to the icon in the Theme selector in the Confluence admininstration screen.\n\n"
              },
              "availableGlobally": {
                "type": "boolean",
                "fieldDescription": "\n\nA configuration to make the theme available to select in global administration. The default is false.\n\n"
              },
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string",
                "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
              }
            },
            "required": [
              "name",
              "key"
            ],
            "shortClassName": "confluenceThemeModuleBean",
            "type": "object",
            "title": "Theme",
            "description": "\n\nThemes change the appearance of screens in Confluence, like page content, the dashboard, and the search view. Themed\n screens look different but retain their Confluence URL, so existing links work as normal. To find out more about\n themes from a user’s perspective, check out the <a href=\"https://confluence.atlassian.com/display/DOC/Working+with+Themes\">documentation on themes</a>\n in our Confluence admin guide.\n\n <h2>Key Concepts</h2>\n\n <table summary=\"Concepts in Themes\">\n     <caption style=\"text-align: left;\">\n         Let’s define some key terms and concepts related to themes. We’ll use these names to refer to the concepts\n         throughout this guide.\n     </caption>\n     <tr>\n         <th>Name</th>\n         <th>Description</th>\n     </tr>\n     <tr>\n         <td valign=\"top\">Theme</td>\n         <td>\n             A theme is a module that allows the add-on to customize the view on a Confluence route. The theme is\n             responsible for creating the entire user interface for that route.\n         </td>\n     </tr>\n     <tr>\n         <td valign=\"top\">Route</td>\n         <td>\n             A route is a URL that Confluence owns. For example, the \"spaceview\" route refers to the screen that displays\n             the space home page. Themes override the rendering aspect of a route in order to display a customized view\n             for that route. Routes are referred to by name, aren’t specific to a particular URL. The structure of a URL\n             for a particular route isn't an API. Currently, the space view is the only route supported, and it takes a space key to identify the space.\n         </td>\n     </tr>\n </table>\n\n <h2>Creating a theme</h2>\n\n To create a theme for Confluence, you need to create a theme module descriptor (as described in this guide).\n You also need to create the HTML/CSS/Javascript for the theme &ndash; you can make use of the Confluence Web Components Library if you like &ndash;\n which will be served to the user via an iframe.\n\n A theme module descriptor contains a set of routes to override. The URL belonging to the\n <a href=\"../theme-route-definition/\">route definition</a> property will be rendered as a full page iframe &ndash; similar to\n a general page module &ndash; without the Confluence header.\n\n The URL supplied by the route property will be given a set of <a href=\"../../context-parameters/\">context parameters</a>.\n These context parameters will contain information about the specific route, and can be used by your add-on to render appropriate\n content. For example, the <code>spaceview</code> route will have the context parameter <code>space.key</code>, which is the\n key of the space being rendered. The <a href=\"../theme-routes/\">theme routes</a> documentation details each context\n parameter and its meaning for each route.\n\n The theme is expected to create an appropriate UI for the particular route being overridden. The <code>spaceview</code> route\n is expected to show the home page of a specific space. The JavaScript API is also available inside a theme iframe,\n so that the theme can perform client-side requests to Confluence or display dialogs.\n\n <img width=\"640\" src=\"/cloud/connect/images/confluence-theme-screenshot-1.png\" alt=\"Screenshot of a sample Theme showing a Confluence page\">\n\n The theme can optionally provide custom space experiences, which can be applied to a particular space or globally (to all spaces).\n The look and feel settings in the descriptor will be saved into the colour scheme settings under a Theme setting.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"confluenceThemes\": [\n          {\n            \"routes\": {\n              \"spaceview\": {\n                \"url\": \"/my-spaceview/{space.key}\"\n              }\n            },\n            \"icon\": {\n              \"width\": 110,\n              \"height\": 70,\n              \"url\": \"/my-theme-icon.png\"\n            },\n            \"description\": {\n              \"value\": \"Some description\"\n            },\n            \"lookAndFeel\": {\n              \"headings\": {\n                \"color\": \"#333333\"\n              },\n              \"links\": {\n                \"color\": \"#3572B0\"\n              },\n              \"menus\": {\n                \"hoverOrFocus\": {\n                  \"backgroundColor\": \"#3873AE\"\n                },\n                \"color\": \"#000000\"\n              },\n              \"bordersAndDividers\": {\n                \"color\": \"#0D0E0E\"\n              },\n              \"header\": {\n                \"backgroundColor\": \"#661F2D\",\n                \"button\": {\n                  \"backgroundColor\": \"#894E59\",\n                  \"color\": \"#FFFFFF\"\n                },\n                \"primaryNavigation\": {\n                  \"hoverOrFocus\": {\n                    \"backgroundColor\": \"#863647\",\n                    \"color\": \"#FFFFFF\"\n                  },\n                  \"color\": \"#FFFFFF\"\n                },\n                \"secondaryNavigation\": {\n                  \"hoverOrFocus\": {\n                    \"backgroundColor\": \"#863647\",\n                    \"color\": \"#FFFFFF\"\n                  },\n                  \"color\": \"#000000\"\n                },\n                \"search\": {\n                  \"backgroundColor\": \"#9A636B\",\n                  \"color\": \"#FFFFFF\"\n                }\n              },\n              \"content\": {\n                \"screen\": {\n                  \"layer\": {\n                    \"width\": \"100%\",\n                    \"height\": \"250px\",\n                    \"backgroundImage\": \"url('http://path/to/img/skyline.jpg')\",\n                    \"backgroundSize\": \"cover\",\n                    \"backgroundRepeat\": \"no-repeat\"\n                  },\n                  \"gutterTop\": \"20px\",\n                  \"gutterRight\": \"small\",\n                  \"gutterBottom\": \"10px\",\n                  \"gutterLeft\": \"small\",\n                  \"background\": \"linear-gradient(45deg, rgba(176,104,112,1) 0%, rgba(244,212,216,1) 100%)\"\n                },\n                \"container\": {\n                  \"padding\": \"0 20px\",\n                  \"borderRadius\": \"10px\",\n                  \"background\": \"#F4D4D8\"\n                },\n                \"header\": {\n                  \"padding\": \"20px 0 90px 20px\",\n                  \"borderRadius\": \"5px 5px 0 0\",\n                  \"backgroundColor\": \"rgba(0, 0, 0, 0.2)\"\n                },\n                \"body\": {\n                  \"padding\": \"10px\",\n                  \"borderRadius\": \"0 0 5px 5px\",\n                  \"background\": \"#FFFFFF\"\n                }\n              }\n            },\n            \"name\": {\n              \"value\": \"My Addon Theme\"\n            },\n            \"key\": \"my-addon-theme\"\n          }\n        ]\n      }\n    }\n\n\n\n\n\n <h2>Limitations</h2>\n\n The following limitations apply to themes:\n\n <ul>\n     <li>\n         A theme can only override a pre-defined set of routes\n     </li>\n     <li>\n         A theme can’t override Confluence administration routes\n     </li>\n </ul>\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nThemes, useful for overriding confluence's UI.\n\n"
        }
      }
    },
    "lifecycle": {
      "properties": {
        "installed": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nWhen a Connect add-on is installed, a synchronous request is fired to this URL to initiate the installation\n handshake. In order to successfully complete installation, the add-on must respond with either a\n <code>200 OK</code> or <code>204 No Content</code> status.\n\n<div class=\"aui-message warning\">\n    <p class=\"title\">\n        <span class=\"aui-icon icon-warning\">Warning</span>\n        <strong>Important</strong>\n    </p>\n    Upon successful registration, the add-on must return either a <code>200 OK</code> or <code>204 No Content</code>\n    response code, otherwise the operation will fail and the installation will be marked as incomplete.\n</div>\n\n"
        },
        "disabled": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nFires when an add on has been successfully disabled. This is an asynchronous notification event.\n\n"
        },
        "uninstalled": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nFires when an add on has been successfully un-installed. This is an asynchronous notification event.\n\n"
        },
        "enabled": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nFires when an add on has been successfully enabled. This is an asynchronous notification event.\n\n"
        }
      },
      "shortClassName": "lifecycleBean",
      "type": "object",
      "title": "Lifecycle",
      "description": "\n\nAllows an add-on to register callbacks for events that occur in the lifecycle of an installation. When a lifecycle\n event is fired, a POST request will be made to the appropriate URL registered for the event.\n\n The <a href=\"#installed\"><code>installed</code></a> lifecycle callback is an integral part of the installation process\n of an add-on, whereas the remaining lifecycle events are essentially <a href=\"../modules/webhook/\">webhooks</a>.\n\n Each property in this object is a URL relative to the add-on's base URL.\n\n <h2>Lifecycle attribute example</h2>\n\n\n\n\n\n    {\n      \"installed\": \"/installed\",\n      \"uninstalled\": \"/uninstalled\",\n      \"enabled\": \"/enabled\",\n      \"disabled\": \"/disabled\"\n    }\n\n\n\n\n <h2>Lifecycle HTTP request payload</h2>\n Lifecycle callbacks contain a JSON data payload with important tenant information that you will need to store in your\n add-on in order to sign and verify future requests. The payload contains the following attributes:\n\n\n\n\n\n    {\n      \"key\": \"installed-addon-key\",\n      \"clientKey\": \"unique-client-identifier\",\n      \"sharedSecret\": \"a-secret-key-not-to-be-lost\",\n      \"serverVersion\": \"server-version\",\n      \"pluginsVersion\": \"version-of-connect\",\n      \"baseUrl\": \"http://example.atlassian.net\",\n      \"productType\": \"jira\",\n      \"description\": \"Atlassian Jira at https://example.atlassian.net\",\n      \"serviceEntitlementNumber\": \"SEN-number\",\n      \"eventType\": \"installed\"\n    }\n\n\n\n\n<table summary=\"Lifecycle payload attributes\" class='aui'>\n    <thead>\n        <tr>\n            <th>Attribute</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tr>\n        <td><code>key</code></td>\n        <td>Add-on key that was installed into the Atlassian Product, as it appears in your add-on's descriptor.</td>\n    </tr>\n    <tr>\n        <td><code>clientKey</code></td>\n        <td>Identifying key for the Atlassian product instance that the add-on was installed into. This will never change for a given\n        instance, and is unique across all Atlassian product tenants. This value should be used to key tenant details\n        in your add-on. The one time the clientKey can change is when a backup taken from a different instance is restored onto the instance.\n        Determining the contract between the instance and add-on in this situation is tracked by\n        <a href=\"https://ecosystem.atlassian.net/browse/AC-1528\">AC-1528</a> in the Connect backlog.</td>\n    </tr>\n    <tr>\n        <td><code>sharedSecret</code></td>\n        <td>Use this string to sign outgoing JWT tokens and validate incoming JWT tokens. Optional: and may not\n        be present on non-JWT add-on installations, and is only sent on the <code>installed</code> event.</td>\n    </tr>\n    <tr>\n        <td><code>serverVersion</code></td>\n        <td>This is a string representation of the host product's version. Generally you should not need it.</td>\n    </tr>\n    <tr>\n        <td><code>pluginsVersion</code></td>\n        <td>This is a semver compliant version of Atlassian Connect which is running on the host server, for example: <code>1.1.15</code>.</td>\n    </tr>\n    <tr>\n        <td><code>baseUrl</code></td>\n        <td>URL prefix for this Atlassian product instance. All of its REST endpoints begin with this `baseUrl`.</td>\n    </tr>\n    <tr>\n        <td><code>productType</code></td>\n        <td>Identifies the category of Atlassian product, e.g. <code>jira</code> or <code>confluence</code>.</td>\n    </tr>\n    <tr>\n        <td><code>description</code></td>\n        <td>The host product description - this is customisable by an instance administrator.</td>\n    </tr>\n    <tr>\n        <td><code>serviceEntitlementNumber</code>\n        (optional)</td>\n        <td>Also known as the SEN, the service entitlement number is the add-on license id. This attribute will only be included\n        during installation of a paid add-on.</td>\n    </tr>\n      <tr>\n        <td><code>oauthClientId</code></td>\n        <td>The OAuth 2.0 client ID for your add-on. For more information, see <a href=\"../oauth-2-jwt-bearer-tokens-for-add-ons/\">OAuth 2.0 - JWT Bearer token authorization grant type</a> </td>\n    </tr>\n</table>\n\n <h2>Request query parameters</h2>\n\n <p>When this payload information is POSTed to your Atlassian Connect service you may receive the <code>user\\_key</code> and <code>user\\_id</code>\n query parameters; these query parameters are both deprecated. <span class=\"aui-lozenge aui-lozenge-current\">Deprecated</span>\n If you wish to find out which user enabled your add-on then you should extract the <code>context.user.userKey</code> or <code>context.user.userName</code>\n data from the JWT token on the enabled lifecycle event.</p>\n\n",
      "fieldDescription": "\n\nAllows the add on to register for plugin lifecycle notifications\n\n"
    },
    "baseUrl": {
      "maxLength": 200,
      "format": "uri",
      "type": "string",
      "fieldDescription": "\n\nThe base url of the remote add-on, which is used for all communications back to the add-on instance. Once the add-on is installed in a product, the add-on's baseUrl\n cannot be changed without first uninstalling the add-on. This is important; choose your baseUrl wisely before making your add-on public.\n\n The baseUrl must start with ``https://`` to ensure that all data is sent securely between our [cloud instances](../../understanding-jwt/)\n and your add-on.\n\n Note: each add-on must have a unique baseUrl. If you would like to serve multiple add-ons from the same host, consider adding a path prefix into the baseUrl.\n\n"
    },
    "apiVersion": {
      "type": "integer",
      "fieldDescription": "\n\nThe API version is an OPTIONAL integer. If omitted we will infer an API version of 1.\n\n The intention behind the API version is to allow vendors the ability to beta test a major revision to their Connect add-on as a private version,\n and have a seamless transition for those beta customers (and existing customers) once the major revision is launched. \n\n Vendors can accomplish this by listing a new private version of their add-on, with a new descriptor hosted at a new URL. \n\n They use the Atlassian Marketplace's access token facilities to share this version with customers (or for internal use). \n When this version is ready to be taken live, it can be transitioned from private to public, and all customers will be seamlessly updated.\n\n It's important to note that this approach allows vendors to create new versions manually, despite the fact that in the common case, the versions are automatically created.\n This has a few benefits-- for example, it gives vendors the ability to change their descriptor URL if they need to \n (the descriptor URL will be immutable for existing versions)\n\n"
    },
    "vendor": {
      "$ref": "#/definitions/vendor",
      "fieldDescription": "\n\nThe vendor who is offering the add-on\n\n"
    },
    "translations": {
      "properties": {
        "paths": {
          "properties": {
            "ru-RU": {
              "format": "uri",
              "type": "string",
              "title": "ru-RU",
              "fieldDescription": "\n\nTranslations for the \"ru-RU\" (Russian) locale.\n\n"
            },
            "de-DE": {
              "format": "uri",
              "type": "string",
              "title": "de-DE",
              "fieldDescription": "\n\nTranslations for the \"de-DE\" (German) locale.\n\n"
            },
            "pt-PT": {
              "format": "uri",
              "type": "string",
              "title": "pt-PT",
              "fieldDescription": "\n\nTranslations for the \"pt-PT\" (Portuguese) locale.\n\n"
            },
            "en-US": {
              "format": "uri",
              "type": "string",
              "title": "en-US",
              "fieldDescription": "\n\nTranslations for the \"en-US\" (American English) locale.\n\n"
            },
            "ko-KR": {
              "format": "uri",
              "type": "string",
              "title": "ko-KR",
              "fieldDescription": "\n\nTranslations for the \"ko-KR\" (Korean) locale.\n\n"
            },
            "es-ES": {
              "format": "uri",
              "type": "string",
              "title": "es-ES",
              "fieldDescription": "\n\nTranslations for the \"es-ES\" (Spanish) locale.\n\n"
            },
            "en-UK": {
              "format": "uri",
              "type": "string",
              "title": "en-UK",
              "fieldDescription": "\n\nTranslations for the \"en-UK\" (British English) locale.\n\n"
            },
            "fr-FR": {
              "format": "uri",
              "type": "string",
              "title": "fr-FR",
              "fieldDescription": "\n\nTranslations for the \"fr-FR\" (French) locale.\n\n"
            },
            "ja-JP": {
              "format": "uri",
              "type": "string",
              "title": "ja-JP",
              "fieldDescription": "\n\nTranslations for the \"ja-JP\" (Japanese) locale.\n\n"
            }
          },
          "additionalProperties": false,
          "shortClassName": "translationPathsBean",
          "type": "object",
          "title": "Translation Paths",
          "description": "\n\nThis object is used to specify the locations of translations files.\n It is used in the <a href=\"../internationalization/\">translations</a> property of the add-on descriptor.\n\n Every property in this object is optional. The location defined in each property can be relative to the base URL of the add-on or absolute.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"en-US\": \"/i18n/1.0/en_US.json\",\n      \"en-UK\": \"/i18n/1.0/en_UK.json\",\n      \"fr-FR\": \"/i18n/1.0/fr_FR.json\",\n      \"de-DE\": \"/i18n/1.0/de_DE.json\",\n      \"pt-PT\": \"/i18n/1.0/pt_PT.json\",\n      \"es-ES\": \"/i18n/1.0/es_ES.json\",\n      \"ja-JP\": \"/i18n/1.0/ja_JP.json\",\n      \"ko-KR\": \"/i18n/1.0/ko_KR.json\",\n      \"ru-RU\": \"/i18n/1.0/ru_RU.json\"\n    }\n\n\n",
          "fieldDescription": "\n\nThe URLs of the translation files for your add-on.\n\n"
        }
      },
      "required": [
        "paths"
      ],
      "shortClassName": "translationsBean",
      "type": "object",
      "title": "Translations",
      "description": "\n\nDefines the locations of any translation files for your add-on.\n A translation file maps the localization keys for UI modules in your add-on descriptor to translated strings.\n You will need one translation file per language. To learn more, read <a href=\"../modules/i18n/\"> Internationalization</a>.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"paths\": {\n        \"en-US\": \"/i18n/1.0/en_US.json\",\n        \"en-UK\": \"/i18n/1.0/en_UK.json\",\n        \"fr-FR\": \"/i18n/1.0/fr_FR.json\",\n        \"de-DE\": \"/i18n/1.0/de_DE.json\",\n        \"pt-PT\": \"/i18n/1.0/pt_PT.json\",\n        \"es-ES\": \"/i18n/1.0/es_ES.json\",\n        \"ja-JP\": \"/i18n/1.0/ja_JP.json\",\n        \"ko-KR\": \"/i18n/1.0/ko_KR.json\",\n        \"ru-RU\": \"/i18n/1.0/ru_RU.json\"\n      }\n    }\n\n\n",
      "fieldDescription": "\n\n[Translations](../modules/i18n/) for this add-on.\n\n\n\n\n\n    {\n      \"translations\": {\n        \"paths\": {\n          \"en-US\": \"/i18n/1.0/en_US.json\",\n          \"en-UK\": \"/i18n/1.0/en_UK.json\",\n          \"fr-FR\": \"/i18n/1.0/fr_FR.json\",\n          \"de-DE\": \"/i18n/1.0/de_DE.json\",\n          \"pt-PT\": \"/i18n/1.0/pt_PT.json\",\n          \"es-ES\": \"/i18n/1.0/es_ES.json\",\n          \"ja-JP\": \"/i18n/1.0/ja_JP.json\",\n          \"ko-KR\": \"/i18n/1.0/ko_KR.json\",\n          \"ru-RU\": \"/i18n/1.0/ru_RU.json\"\n        }\n      }\n    }\n\n\n"
    },
    "enableLicensing": {
      "type": "boolean",
      "fieldDescription": "\n\nWhether or not to enable licensing options in the UPM/Marketplace for this add on\n\n",
      "defaultValue": "false"
    },
    "name": {
      "maxLength": 80,
      "type": "string",
      "fieldDescription": "\n\nThe human-readable name of the add-on\n\n"
    },
    "links": {
      "additionalProperties": true,
      "type": "object",
      "fieldDescription": "\n\nA set of links that the add-on wishes to publish\n\n\n\n\n\n    {\n      \"links\": {\n        \"self\": \"https://addon.domain.com/atlassian-connect.json\",\n        \"documentation\": \"https://addon.domain.com/docs\"\n      }\n    }\n\n\n"
    },
    "scopes": {
      "items": {
        "enum": [
          "none",
          "NONE",
          "read",
          "READ",
          "write",
          "WRITE",
          "delete",
          "DELETE",
          "project_admin",
          "PROJECT_ADMIN",
          "space_admin",
          "SPACE_ADMIN",
          "admin",
          "ADMIN",
          "act_as_user",
          "ACT_AS_USER"
        ],
        "type": "string"
      },
      "type": "array",
      "fieldDescription": "\n\nSet of [scopes](../../scopes/) requested by this add on\n\n\n\n\n\n    {\n      \"scopes\": [\n        \"write\",\n        \"read\"\n      ]\n    }\n\n\n"
    },
    "key": {
      "pattern": "^[a-zA-Z0-9-._]+$",
      "maxLength": 80,
      "type": "string",
      "fieldDescription": "\n\nA unique key to identify the add-on.\n This key must be &lt;= 80 characters, must only contain alphanumeric characters, dashes, underscores, and dots.\n\n"
    },
    "authentication": {
      "properties": {
        "publicKey": {
          "type": "string",
          "fieldDescription": "\n\nThe public key used for asymmetric key encryption. Ignored when using JWT with a shared secret.\n\n"
        },
        "type": {
          "enum": [
            "jwt",
            "JWT",
            "none",
            "NONE"
          ],
          "type": "string",
          "fieldDescription": "\n\nThe type of authentication to use.\n\n",
          "defaultValue": "jwt"
        }
      },
      "shortClassName": "authenticationBean",
      "type": "object",
      "title": "Authentication",
      "description": "\n\nDefines the authentication type to use when signing requests from the host application to the Connect add-on.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"authentication\": {\n        \"type\": \"jwt\"\n      }\n    }\n\n\n",
      "fieldDescription": "\n\nDefines the authentication type to use when signing requests between the host application and the connect add on.\n\n"
    }
  },
  "required": [
    "baseUrl",
    "key",
    "authentication"
  ],
  "shortClassName": "shallowConnectAddonBean",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "title": "Add-On Descriptor",
  "description": "\n\n<p>The add-on descriptor is a JSON file (<code>atlassian-connect.json</code>) that describes the add-on to the Atlassian application.\n The descriptor includes general information for the add-on, as well as the modules that the add-on wants to use or\n extend.</p>\n\n <p>If you're familiar with Java add-on development with previous versions of the Atlassian Plugin Framework, you may already be\n familiar with the `atlassian-plugin.xml` descriptors. The `atlassian-connect.json` serves the same function.</p>\n\n <p>The descriptor serves as the glue between the remote add-on and the Atlassian application. When an administrator for a\n cloud instance installs an add-on, what they are really doing is installing this descriptor file, which\n contains pointers to your service. You can see an example below.</p>\n\n <p>For details and application-specific reference information on the descriptor please refer to the \"jira modules\"\n and \"confluence modules\" sections of this documentation. But we'll call out a few highlights from the example here.</p>\n\n <p>Since Atlassian Connect add-ons are remote and largely independent from the Atlassian application, they can be changed\n at any time, without having to create a new version or report the change to the Atlassian instance. The changes are\n reflected in the Atlassian instance immediately (or at least at page reload time).</p>\n\n <p>However, some add-on changes require a change to the descriptor file itself. For example, an add-on could be modified\n to have a new page module. Since this requires a page module declaration in the descriptor, it means making an updated\n descriptor available. Until that updated descriptor is re-installed into the Atlassian Product that change in the descriptor\n file will not take effect. To propagate a change in the descriptor to the Atlassian products, you need to create a new version\n of the add-on in its Marketplace listing. The Marketplace will take care of the rest: informing administrators\n and automatically installing the available update. See [Upgrades](/platform/marketplace/upgrading-and-versioning-cloud-apps/) for more details.</p>\n\n <div class=\"aui-message aui-message-info\">\n     <p class=\"title\">\n         <strong>Validating your descriptor</strong>\n     </p>\n     <p>You can validate your descriptor using this <a href=\"https://atlassian-connect-validator.herokuapp.com/validate\">handy tool</a>.</p>\n </div>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {},\n      \"key\": \"my-addon-key\",\n      \"dependencies\": {},\n      \"name\": \"My Connect Addon\",\n      \"description\": \"A connect addon that does something\",\n      \"vendor\": {\n        \"name\": \"My Company\",\n        \"url\": \"http://www.example.com\"\n      },\n      \"links\": {\n        \"self\": \"http://www.example.com/connect/jira\"\n      },\n      \"lifecycle\": {\n        \"installed\": \"/installed\",\n        \"uninstalled\": \"/uninstalled\"\n      },\n      \"baseUrl\": \"http://www.example.com/connect/jira\",\n      \"authentication\": {\n        \"type\": \"jwt\"\n      },\n      \"enableLicensing\": true,\n      \"scopes\": [\n        \"write\",\n        \"read\"\n      ],\n      \"translations\": {\n        \"paths\": {\n          \"en-US\": \"/i18n/1.0/en_US.json\",\n          \"en-UK\": \"/i18n/1.0/en_UK.json\",\n          \"fr-FR\": \"/i18n/1.0/fr_FR.json\",\n          \"de-DE\": \"/i18n/1.0/de_DE.json\",\n          \"pt-PT\": \"/i18n/1.0/pt_PT.json\",\n          \"es-ES\": \"/i18n/1.0/es_ES.json\",\n          \"ja-JP\": \"/i18n/1.0/ja_JP.json\",\n          \"ko-KR\": \"/i18n/1.0/ko_KR.json\",\n          \"ru-RU\": \"/i18n/1.0/ru_RU.json\"\n        }\n      }\n    }\n\n\n",
  "definitions": {
    "webItem": {
      "properties": {
        "styleClasses": {
          "items": {
            "pattern": "^[_a-zA-Z]+[_a-zA-Z0-9-]*$",
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nSpecifies custom styles for the web item target page, if desired. By default, the web item content gets\n styled in the default style of the target application.\n It must only contain alphanumeric characters, dashes, underscores\n and must only start with alpha characters or underscores.\n\n"
        },
        "context": {
          "enum": [
            "page",
            "PAGE",
            "addon",
            "ADDON",
            "product",
            "PRODUCT"
          ],
          "type": "string",
          "fieldDescription": "\n\nThe context for the URL parameter, if the URL is specified as a relative (not absolute) URL.\n\n This context can be either `addon`, which renders the URL relative to the add-on's base URL,\n `page` which targets a page module by specifying the page's module key as the url\n or `product`, which renders the URL relative to the product's base URL.\n\n",
          "defaultValue": "addon"
        },
        "tooltip": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe internationalised text to be used in the link's tooltip.\n\n"
        },
        "icon": {
          "$ref": "#/definitions/icon",
          "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n are 16 by 16 pixels.\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "weight": {
          "type": "integer",
          "fieldDescription": "\n\nDetermines the order in which the web item appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
          "defaultValue": "100"
        },
        "location": {
          "type": "string",
          "fieldDescription": "\n\nThe location in the application interface where the web item should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations\".\n For example, the `system.admin/globalsettings` location is in the administrative\n menu on the left side of the Administration Console.\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "properties": {
                  "condition": {
                    "type": "string",
                    "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
                  },
                  "invert": {
                    "type": "boolean",
                    "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                    "defaultValue": "false"
                  },
                  "params": {
                    "additionalProperties": true,
                    "type": "object",
                    "fieldTitle": "Object",
                    "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
                  }
                },
                "required": [
                  "condition"
                ],
                "shortClassName": "singleConditionBean",
                "type": "object",
                "title": "Single Condition",
                "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
              },
              {
                "properties": {
                  "conditions": {
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "$ref": "#"
                        },
                        {
                          "$ref": "#/definitions/singleCondition"
                        }
                      ]
                    },
                    "type": "array",
                    "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                  },
                  "type": {
                    "enum": [
                      "and",
                      "AND",
                      "or",
                      "OR"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                  }
                },
                "shortClassName": "compositeConditionBean",
                "type": "object",
                "title": "Composite Condition",
                "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nSpecifies the URL targeted by the web item. The URL can be absolute or relative to either the\n product URL or the add-on's base URL, depending on the _context_ attribute.\n\n <p>\n     This field is required if the <code>target</code> of the item is not a\n     <a href=\"../dialog/\"><code>Dialog Module</code></a>.\n </p>\n\n Your add-on can receive [additional context](../../context-parameters/) from the application by\n using variable tokens in the URL attribute.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        },
        "target": {
          "properties": {
            "options": {
              "type": "object",
              "fieldDescription": "\n\n<p>An object containing options which vary based on the type of web item target you are implementing.</p>\n\n <p>Currently-allowed options are:</p>\n <ul>\n     <li><a href=\"../inline-dialog-options/\">Inline Dialog Options</a> when type is \"inlinedialog\", and</li>\n     <li><a href=\"../dialog-options/\">Dialog Options</a> when type is \"dialog\"</li>\n     <li><a href=\"../dialog-module-options/\">Dialog Module Options</a> when type is \"dialogmodule\"</li>\n </ul>\n\n",
              "anyOf": [
                {
                  "properties": {
                    "size": {
                      "enum": [
                        "small",
                        "SMALL",
                        "medium",
                        "MEDIUM",
                        "large",
                        "LARGE",
                        "x-large",
                        "X-LARGE",
                        "fullscreen",
                        "FULLSCREEN",
                        "maximum",
                        "MAXIMUM"
                      ],
                      "type": "string",
                      "fieldDescription": "\n\nSets the size of the dialog.\n\n <p>\n     This option is used instead of the 'height' and 'width' options.\n </p>\n\n"
                    },
                    "chrome": {
                      "type": "boolean",
                      "fieldDescription": "\n\nWhether the dialog should contain the AUI header and buttons.\n\n",
                      "defaultValue": "true"
                    },
                    "width": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                    },
                    "header": {
                      "$ref": "#/definitions/i18nProperty",
                      "fieldDescription": "\n\nThe header text for the dialog, if chrome is enabled.\n\n"
                    },
                    "height": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how high the dialog is in pixels\n\n"
                    }
                  },
                  "shortClassName": "dialogOptions",
                  "type": "object",
                  "title": "Dialog Options",
                  "description": "\n\nOptions for a modal dialog <a href=\"../web-item-target/\">web item target</a> or <a href=\"../dialog/\">common module</a>.\n\n <p>\n     These options are a subset of those available via the <a href=\"../../jsapi/dialog/\">JavaScript API</a>.\n </p>\n\n <h2>Web Item Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n"
                },
                {
                  "properties": {
                    "offsetX": {
                      "type": "string",
                      "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the x-axis in pixels\n\n"
                    },
                    "offsetY": {
                      "type": "string",
                      "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the y-axis in pixels\n\n"
                    },
                    "width": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                    },
                    "onTop": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if the dialog should be shown above the trigger or not. If this option is true but there is insufficient room above the trigger the inline-dialog will be flipped to display below it\n\n"
                    },
                    "showDelay": {
                      "type": "integer",
                      "fieldDescription": "\n\nDetermines how long in milliseconds after a show trigger is fired (such as a trigger click) until the dialog is shown\n\n"
                    },
                    "closeOthers": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if all other dialogs on the screen are closed when this one is opened\n\n"
                    },
                    "persistent": {
                      "type": "boolean",
                      "fieldDescription": "\n\nThis option, ignores the 'closeOthers' option\n\n"
                    },
                    "onHover": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines whether the inline-Dialog will show on a mouseOver or mouseClick of the trigger\n\n"
                    },
                    "isRelativeToMouse": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if the dialog should be shown relative to where the mouse is at the time of the event trigger (normally a click) if set to false the dialog will show aligned to the left of the trigger with the arrow showing at the center\n\n"
                    }
                  },
                  "shortClassName": "inlineDialogOptions",
                  "type": "object",
                  "title": "Inline Dialog Options",
                  "description": "\n\nOptions for an inline dialog target\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n"
                },
                {
                  "properties": {
                    "key": {
                      "type": "string",
                      "fieldDescription": "\n\n<p>The key of a <a href=\"../dialog/\">Dialog</a> module declared in this Connect add-on.</p>\n\n <p>\n The dialog module will include the <a href=\"../dialog-options/\">Dialog Options</a>\n that would otherwise need to be specified directly in this options object.\n </p>\n\n"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "shortClassName": "dialogModuleOptions",
                  "type": "object",
                  "title": "Dialog Module Options",
                  "description": "\n\nOptions for a web-item targeting a common <a href=\"../dialog/\">dialog module</a>.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n"
                }
              ]
            },
            "type": {
              "enum": [
                "page",
                "PAGE",
                "dialog",
                "DIALOG",
                "inlinedialog",
                "INLINEDIALOG",
                "dialogmodule",
                "DIALOGMODULE"
              ],
              "type": "string",
              "fieldDescription": "\n\nDefines how the web-item content should be loaded by the page. By default, the web-item is loaded in the same\n page. The target can be set to open the web-item url as a modal dialog or an inline dialog.\n\n",
              "defaultValue": "page"
            }
          },
          "shortClassName": "webItemTargetBean",
          "type": "object",
          "title": "Web Item Target",
          "description": "\n\nDefines the way a <a href=\"../web-item/\">web item</a> link is opened in the browser, such as in a modal or inline dialog.\n\n <h2>Inline Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Common Dialog Module Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n\n\n <p>More details for this use-case can be found on the <a href=\"../dialog/\">Dialog Module</a> page.</p>\n\n",
          "fieldDescription": "\n\nDefines the behaviour when the item is triggered.\n If omitted, the url behaves as a regular hyperlink.\n\n"
        }
      },
      "required": [
        "name",
        "location",
        "key"
      ],
      "shortClassName": "webItemModuleBean",
      "type": "object",
      "title": "Web Item",
      "description": "\n\n<p>Adds a web item to a specified location in the application interface. A web item is a hyperlink\n that’s inserted into some standard place in the Atlassian application interface, such as the\n administration menu.</p>\n\n <p>The form that the link takes can vary depending on the location. For instance, a web item in the header bar\n (with a location section of `system.top.navigation.bar`) adds a link to the navigation bar across the top of the\n interface. On the other hand, a web item in the `opsbar-operation` location section in Jira adds an item to the\n issue operation buttons.</p>\n\n <p>A web item link can open a new page in the application or a dialog, depending on your configuration.</p>\n\n <p>Web items are a simple and useful way to extend Atlassian applications. If you want to extend an Atlassian\n application and don't know where to start, a web item may be all you need.</p>\n\n <p>Your add-on can receive [additional context](../../context-parameters/) from the application by\n using variable tokens in the `url` attribute.</p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"webItems\": [\n          {\n            \"location\": \"system.preset.filters\",\n            \"weight\": 200,\n            \"styleClasses\": [\n              \"webitem\",\n              \"system-present-webitem\"\n            ],\n            \"url\": \"/my-web-item\",\n            \"context\": \"addon\",\n            \"target\": {\n              \"type\": \"page\"\n            },\n            \"tooltip\": {\n              \"value\": \"Example tooltip\"\n            },\n            \"icon\": {\n              \"width\": 16,\n              \"height\": 16,\n              \"url\": \"/maps/icon.png\"\n            },\n            \"name\": {\n              \"value\": \"My Web Item\"\n            },\n            \"key\": \"web-item-example\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "webPanel": {
      "properties": {
        "layout": {
          "$ref": "#/definitions/webPanelLayout",
          "fieldDescription": "\n\nThe width and height of the web panel on the page.\n\n"
        },
        "tooltip": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nInformation about the web panel that will be shown when hovering over its header\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "weight": {
          "type": "integer",
          "fieldDescription": "\n\nDetermines the order in which web panels appear. Web panels are displayed top to bottom or left to right in order\n of ascending weight. The \"lightest\" weight is displayed first, while the \"heaviest\" weights sink to the bottom.\n The weight values for most panels start from 100, and the weights for the links generally start from 10. The\n weight is incremented by 10 for each in sequence to leave room for custom panels.\n\n"
        },
        "location": {
          "type": "string",
          "fieldDescription": "\n\n<p>Location in the application interface for this panel.</p>\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/definitions/singleCondition"
              },
              {
                "$ref": "#/definitions/compositeCondition"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nThe URL of the add-on resource that provides the web panel content. This URL must be relative to the add-on's baseUrl.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        }
      },
      "required": [
        "name",
        "location",
        "url",
        "key"
      ],
      "shortClassName": "webPanelModuleBean",
      "type": "object",
      "title": "Web Panel",
      "description": "\n\nAdds a panel (or section) to a page in the Atlassian application. Panels let you present related information and\n controls in the application interface as a group. For example, the existing \"People\" panel in Jira issue view shows\n the assignee, reporter, and similar information for the issue.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"webPanels\": [\n          {\n            \"url\": \"/web-panel\",\n            \"location\": \"atl.jira.view.issue.right.context\",\n            \"layout\": {\n              \"width\": \"10px\",\n              \"height\": \"100%\"\n            },\n            \"weight\": 50,\n            \"name\": {\n              \"value\": \"My Web Panel\"\n            },\n            \"key\": \"my-web-panel\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "webhook": {
      "properties": {
        "filter": {
          "type": "string",
          "fieldDescription": "\n\nFilter for entities that the webhook will be triggered for. Refer to the documentation on <a href=\"#Filtering\">filtering</a> for details.\n\n"
        },
        "excludeBody": {
          "type": "boolean",
          "fieldDescription": "\n\nSpecifies if webhook will send JSON body when triggered. By default, a webhook will send a request with a JSON body.\n\n",
          "defaultValue": "false"
        },
        "event": {
          "type": "string",
          "fieldDescription": "\n\nSpecifies the named event you would like to listen to (e.g., \"enabled\", \"jira:issue\\_created\", etc.)\n\n"
        },
        "propertyKeys": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nSpecifies entity properties which will be returned inside JSON body. If not specified no properties will be returned.\n\n Currently this is supported only in Jira webhooks, for all events that support <a href=\"../../jira-entity-properties/\">Entity Properties</a>.\n Note that properties won't be returned for entity-deleted events, since the properties are already deleted by the time the webhook is sent.\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nSpecifies your add-on's POST webhook handler URL. This property must be a URL relative to the add-on's baseUrl.\n\n"
        }
      },
      "required": [
        "event",
        "url"
      ],
      "shortClassName": "webHookModuleBean",
      "type": "object",
      "title": "Webhook",
      "description": "\n\nA webhook is a standard mechanism for an add-on to listen to in-product events via HTTP callbacks. An add-on can register\n a webhook in the Atlassian Connect descriptor to listen to events that are fired by Jira or Confluence.\n\n Just to give you an idea of how you can use them in add-ons, here are a few sample webhook events:\n\n <ul>\n  <li>When an add-on is enabled or disabled</li>\n  <li>When an issue is created or closed in Jira</li>\n  <li>When a page is created or updated in Confluence</li>\n  <li>An attachment is viewed in Confluence</li>\n </ul>\n\n If your add-on uses webhooks, you must declare the <a href=\"../../scopes/\">\"read\" scope</a>\n in your <a href=\"../../add-on-descriptor/\"><code>atlassian-connect.json</code> descriptor</a>.\n\n <h3>Handling the webhook event</h3>\n\n To receive webhook events, your add-on needs to include the webhook module declaration in its JSON descriptor. The\n declaration indicates the add-on relative URL at which it will receive the notification. In other\n words, the Atlassian application will send an HTTP POST to this resource in response to an application event. The\n add-on code that handles the POST should process any information passed in the body of the message, as appropriate.\n Each webhook POST sent to the add-on will also include the authentication headers that allow the add-on to validate\n the authenticity of that request. Specifically, the JWT token can be found in the \"Authorization\" HTTP header.\n\n Note that if using Apache and mod\\_wsgi to serve files to a Django application, the Authentication header is stripped\n out by default. <a href=\"http://www.django-rest-framework.org/api-guide/authentication/#apache-mod_wsgi-specific-configuration\">Extra configuration</a>\n is required to ensure the Authentication header is visible.\n\n <strong>Important:</strong> It must be noted that webhook delivery is not guaranteed; it is best effort. When a webhook\n event is triggered in Jira or Confluence instance then a single HTTP POST is sent to your add-on. If your add-on is down,\n or there is any network problems between the Atlassian product and your add-on, then you will never receive the\n webhook event. In general, webhooks are quite reliable; however you must always keep in mind that delivery is not guaranteed.\n\n <h3>Variable Substitution</h3>\n\n Jira webhooks also provide a way to add and substitute variables in the url. This is similar to context parameters for add-ons. See\n <a href=\"../../context-parameters/\">context parameters</a>.\n\n For example, if we register to listen for one of the project events with a url containing <code>${project.id}</code>, a POST message will\n be sent to the address with the <code>${project.id}</code> replaced by the id of the project that the event was triggered for.\n\n <h3 id=\"Filtering\">Filtering</h3>\n Additional filters may be specified to trigger webhooks only for events satisfying certain conditions.\n How the filter value is supposed to look like exactly, and whether filtering is available at all, depends on the event type.\n The following sections describe all the possibilities.\n\n <h4>JQL</h4>\n\n Issue-related events may be filtered with JQL. Webhooks will be sent only for issues matched by the provided JQL query.\n Here is an example JQL query that can be put into the \"filter\" property: \"project = TEST AND fixVersion = future\".\n\n JQL filtering is supported only by the following event types:\n\n <ul>\n  <li><code>jira:issue\\_created</code></li>\n  <li><code>jira:issue\\_deleted</code></li>\n  <li><code>jira:issue\\_updated</code></li>\n  <li><code>comment\\_created</code></li>\n  <li><code>comment\\_updated</code></li>\n  <li><code>comment\\_deleted</code></li>\n </ul>\n\n <h3>Webhook event types</h3>\n\n Below is a list of all available webhook events.\n\n <h4>Add-on and system events</h4>\n <ul>\n  <li><code>connect\\_addon\\_disabled</code></li>\n  <li><code>connect\\_addon\\_enabled</code></li>\n </ul>\n\n <h4>Issue events</h4>\n <ul>\n  <li><code>jira:issue\\_created</code></li>\n  <li><code>jira:issue\\_deleted</code></li>\n  <li><code>jira:issue\\_updated</code>\n\n Context parameters are <code>${project.id}, ${project.key}, ${issue.key}, ${issue.id}</code>.</li>\n </ul>\n\n <h4>Version events</h4>\n <ul>\n  <li><code>jira:version\\_created</code></li>\n  <li><code>jira:version\\_deleted</code></li>\n  <li><code>jira:version\\_merged</code></li>\n  <li><code>jira:version\\_updated</code></li>\n  <li><code>jira:version\\_moved</code></li>\n  <li><code>jira:version\\_released</code></li>\n  <li><code>jira:version\\_unreleased</code>\n\n Context parameters are <code>${project.id}, ${project.key}, ${version.id}</code>.\n\n Special context parameter for version\\_merged event is <code>${mergedVersion.id}</code>.</li>\n </ul>\n\n <h4>Project events</h4>\n <ul>\n  <li><code>project\\_created</code></li>\n  <li><code>project\\_updated</code></li>\n  <li><code>project\\_deleted</code>\n\n Context parameters are <code>${project.id}, ${project.key}</code></li>\n </ul>\n\n <h4>User events</h4>\n <ul>\n  <li><code>user\\_created</code></li>\n  <li><code>user\\_deleted</code></li>\n  <li><code>user\\_updated</code>\n\n Context parameters: <code>${modifiedUser.name}, ${modifiedUser.key}</code></li>\n </ul>\n\n <h4>Feature status events</h4>\n <ul>\n  <li><code>option\\_voting\\_changed</code></li>\n  <li><code>option\\_watching\\_changed</code></li>\n  <li><code>option\\_unassigned\\_issues\\_changed</code></li>\n  <li><code>option\\_subtasks\\_changed</code></li>\n  <li><code>option\\_attachments\\_changed</code></li>\n  <li><code>option\\_issuelinks\\_changed</code></li>\n  <li><code>option\\_timetracking\\_changed</code></li>\n </ul>\n\n <h4>Comment events</h4>\n <ul>\n  <li><code>comment\\_created</code></li>\n  <li><code>comment\\_updated</code></li>\n  <li><code>comment\\_deleted</code></li>\n </ul>\n\n <h4>Confluence Webhook events</h4>\n\n <ul>\n  <li><code>attachment\\_created</code></li>\n  <li><code>attachment\\_removed</code></li>\n  <li><code>attachment\\_restored</code></li>\n  <li><code>attachment\\_trashed</code></li>\n  <li><code>attachment\\_updated</code></li>\n  <li><code>attachment\\_viewed</code></li>\n  <li><code>blog\\_created</code></li>\n  <li><code>blog\\_removed</code></li>\n  <li><code>blog\\_restored</code></li>\n  <li><code>blog\\_trashed</code></li>\n  <li><code>blog\\_updated</code></li>\n  <li><code>blog\\_viewed</code></li>\n  <li><code>blueprint\\_page\\_created</code></li>\n  <li><code>comment\\_created</code></li>\n  <li><code>comment\\_removed</code></li>\n  <li><code>comment\\_updated</code></li>\n  <li><code>connect\\_addon\\_disabled</code></li>\n  <li><code>connect\\_addon\\_enabled</code></li>\n  <li><code>content\\_created</code></li>\n  <li><code>content\\_restored</code></li>\n  <li><code>content\\_trashed</code></li>\n  <li><code>content\\_updated</code></li>\n  <li><code>content\\_permissions\\_updated</code></li>\n  <li><code>group\\_created</code></li>\n  <li><code>group\\_removed</code></li>\n  <li><code>label\\_added</code></li>\n  <li><code>label\\_created</code></li>\n  <li><code>label\\_deleted</code></li>\n  <li><code>label\\_removed</code></li>\n  <li><code>login</code></li>\n  <li><code>login\\_failed</code></li>\n  <li><code>logout</code></li>\n  <li><code>page\\_children\\_reordered</code></li>\n  <li><code>page\\_created</code></li>\n  <li><code>page\\_moved</code></li>\n  <li><code>page\\_removed</code></li>\n  <li><code>page\\_restored</code></li>\n  <li><code>page\\_trashed</code></li>\n  <li><code>page\\_updated</code></li>\n  <li><code>page\\_viewed</code></li>\n  <li><code>relation\\_created</code></li>\n  <li><code>relation\\_deleted</code></li>\n  <li><code>search\\_performed</code></li>\n  <li><code>space\\_created</code></li>\n  <li><code>space\\_logo\\_updated</code></li>\n  <li><code>space\\_permissions\\_updated</code></li>\n  <li><code>space\\_removed</code></li>\n  <li><code>space\\_updated</code></li>\n  <li><code>theme\\_enabled</code></li>\n  <li><code>user\\_created</code></li>\n  <li><code>user\\_deactivated</code></li>\n  <li><code>user\\_followed</code></li>\n  <li><code>user\\_reactivated</code></li>\n  <li><code>user\\_removed</code></li>\n </ul>\n\n <h4>Example request</h4>\n\n <pre><code>\n POST /jira-issue\\_created?user\\_id=admin&amp;user\\_key=admin HTTP/1.1\n Authorization: JWT ...\n Atlassian-Connect-Version: x.x\n Content-Type: application/json\n {\n   timestamp: 1426661049725,\n   webhookEvent: 'jira:issue\\_created',\n   ...\n }\n </code></pre>\n\n <h3>Example responses</h3>\n\n All webhooks will post JSON data to the listening add-on. The structure of this JSON differs based on the Atlassian\n product that sent the event and the event itself. Here are some example webhook events:\n\n <h4>Jira issue-related webhook event structure</h4>\n\n All webhook events that are sent because of Jira issue updates will have the following structure.\n\n <pre><code>\n {\n   \"timestamp\"\n   \"event\"\n   \"user\": {\n     // See User shape in the linked document\n   },\n   \"issue\": {\n     // See Issue shape in the linked document\n   },\n   \"changelog\" : {\n     // See Changelog shape in the linked document\n   },\n   \"comment\" : {\n     // See Comment shape in in the linked document\n   }\n }\n </code></pre>\n\n This is fully documented in <a href=\"https://developer.atlassian.com/jiradev/jira-apis/webhooks#Webhooks-Example:callbackforanissue-relatedevent\">Webhooks: Example callback for an issue-related event</a>.\n\n <h4>Confluence page\\_created</h4>\n\n <pre><code>\n {\n   \"page\": {\n     \"spaceKey\": \"~admin\",\n     \"modificationDate\": 1471926079631,\n     \"creatorKey\": \"ff80808154510724015451074c160001\",\n     \"creatorName\": \"admin\",\n     \"lastModifierKey\": \"ff80808154510724015451074c160001\",\n     \"self\": \"https://cloud-development-environment.atlassian.net/wiki/display/~admin/Some+random+test+page\",\n     \"lastModifierName\": \"admin\",\n     \"id\": 16777227,\n     \"title\": \"Some random test page\",\n     \"creationDate\": 1471926079631,\n     \"version\": 1\n   },\n   \"user\": \"admin\",\n   \"userKey\": \"ff80808154510724015451074c160001\",\n   \"timestamp\": 1471926079645,\n   \"username\": \"admin\"\n }\n </code></pre>\n\n <h4>Confluence comment\\_created</h4>\n\n <pre><code>\n {\n   \"comment\": {\n     \"spaceKey\": \"~admin\",\n     \"parent\": {\n       \"spaceKey\": \"~admin\",\n       \"modificationDate\": 1471926079631,\n       \"creatorKey\": \"ff80808154510724015451074c160001\",\n       \"creatorName\": \"admin\",\n       \"lastModifierKey\": \"ff80808154510724015451074c160001\",\n       \"self\": \"https://cloud-development-environment.atlassian.net/wiki/display/~admin/Some+random+test+page\",\n       \"lastModifierName\": \"admin\",\n       \"id\": 16777227,\n       \"title\": \"Some random test page\",\n       \"creationDate\": 1471926079631,\n       \"version\": 1\n     },\n     \"modificationDate\": 1471926091465,\n     \"creatorKey\": \"ff80808154510724015451074c160001\",\n     \"creatorName\": \"admin\",\n     \"lastModifierKey\": \"ff80808154510724015451074c160001\",\n     \"self\": \"https://cloud-development-environment/wiki/display/~admin/Some+random+test+page?focusedCommentId=16777228#comment-16777228\",\n     \"lastModifierName\": \"admin\",\n     \"id\": 16777228,\n     \"creationDate\": 1471926091465,\n     \"version\": 1\n   },\n   \"user\": \"admin\",\n   \"userKey\": \"ff80808154510724015451074c160001\",\n   \"timestamp\": 1471926091468,\n   \"username\": \"admin\"\n }\n </code></pre>\n\n <h3>Inspecting webhook contents</h3>\n\n Each type of webhook event includes information specific to that event in the body content of the POST message. The\n add-on resource that listens for webhook posts should receive and process the content as appropriate for the add-on.\n To understand what type of content each webhook generates, you can use the Connect inspector tool.\n\n The <a href=\"https://connect-inspector.atlassian.io/\">Connect inspector</a> is a service that generates temporary\n Atlassian Connect add-on's that you can install in your development environment to inspect the content of event messages.\n The Connect inspector subscribes to every webhook event type available on the running instance of the Atlassian application,\n and prints the body posted by the instance to your web browser.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"webhooks\": [\n          {\n            \"event\": \"jira:issue_created\",\n            \"url\": \"/issue-created\",\n            \"excludeBody\": false,\n            \"filter\": \"project = HSA\",\n            \"propertyKeys\": [\n              \"propertyKey\",\n              \"otherPropertyKey\"\n            ]\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "dialogOptions": {
      "properties": {
        "size": {
          "enum": [
            "small",
            "SMALL",
            "medium",
            "MEDIUM",
            "large",
            "LARGE",
            "x-large",
            "X-LARGE",
            "fullscreen",
            "FULLSCREEN",
            "maximum",
            "MAXIMUM"
          ],
          "type": "string",
          "fieldDescription": "\n\nSets the size of the dialog.\n\n <p>\n     This option is used instead of the 'height' and 'width' options.\n </p>\n\n"
        },
        "chrome": {
          "type": "boolean",
          "fieldDescription": "\n\nWhether the dialog should contain the AUI header and buttons.\n\n",
          "defaultValue": "true"
        },
        "width": {
          "type": "string",
          "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
        },
        "header": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe header text for the dialog, if chrome is enabled.\n\n"
        },
        "height": {
          "type": "string",
          "fieldDescription": "\n\nSets how high the dialog is in pixels\n\n"
        }
      },
      "shortClassName": "dialogOptions",
      "type": "object",
      "title": "Dialog Options",
      "description": "\n\nOptions for a modal dialog <a href=\"../web-item-target/\">web item target</a> or <a href=\"../dialog/\">common module</a>.\n\n <p>\n     These options are a subset of those available via the <a href=\"../../jsapi/dialog/\">JavaScript API</a>.\n </p>\n\n <h2>Web Item Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "icon": {
      "properties": {
        "width": {
          "type": "integer",
          "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
        },
        "url": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
        },
        "height": {
          "type": "integer",
          "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
        }
      },
      "required": [
        "url"
      ],
      "shortClassName": "iconBean",
      "type": "object",
      "title": "Icon",
      "description": "\n\nDefines an icon to display.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
    },
    "singleCondition": {
      "properties": {
        "condition": {
          "type": "string",
          "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
        },
        "invert": {
          "type": "boolean",
          "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
          "defaultValue": "false"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        }
      },
      "required": [
        "condition"
      ],
      "shortClassName": "singleConditionBean",
      "type": "object",
      "title": "Single Condition",
      "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
    },
    "webPanelLayout": {
      "properties": {
        "width": {
          "type": "string",
          "fieldDescription": "\n\n"
        },
        "height": {
          "type": "string",
          "fieldDescription": "\n\n"
        }
      },
      "shortClassName": "webPanelLayout",
      "type": "object",
      "title": "Web Panel Layout",
      "description": "\n\n<h2>Example</h2>\n\n\n\n\n\n    {\n      \"layout\": {\n        \"width\": \"100\",\n        \"height\": \"200\"\n      }\n    }\n\n\n"
    },
    "webSection": {
      "properties": {
        "tooltip": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe internationalised text to be used in the link's tooltip.\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "weight": {
          "type": "integer",
          "fieldDescription": "\n\n<p>Determines the order in which the web section appears in the menu or list.</p>\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items, while the \"heaviest\"\n weights sink to the bottom of the menu or list.</p>\n\n <p>Built-in web sections have weights that are incremented by numbers that leave room for additional sections, such\n as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears in a sensible order given\n existing items.</p>\n\n",
          "defaultValue": "100"
        },
        "location": {
          "type": "string",
          "fieldDescription": "\n\nThe location in the application interface where the web section should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/definitions/compositeCondition"
              },
              {
                "$ref": "#/definitions/singleCondition"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        }
      },
      "required": [
        "name",
        "location",
        "key"
      ],
      "shortClassName": "webSectionModuleBean",
      "type": "object",
      "title": "Web Section",
      "description": "\n\nThe Web Section plugin module allows add-ons to define new sections in application menus. Each section can contain one or\n more links. To insert the links themselves, see the [Web Item Module](../web-item/).\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"webSections\": [\n          {\n            \"location\": \"atl.jira.view.issue.right.context\",\n            \"weight\": 50,\n            \"name\": {\n              \"value\": \"My Web Section\"\n            },\n            \"key\": \"my-web-section\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "i18nProperty": {
      "properties": {
        "value": {
          "type": "string",
          "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n\n"
        },
        "i18n": {
          "type": "string",
          "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
        }
      },
      "required": [
        "value"
      ],
      "shortClassName": "i18nProperty",
      "type": "object",
      "title": "i18n Property",
      "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"name\": {\n        \"value\": \"My Label\"\n      }\n    }\n\n\n"
    },
    "compositeCondition": {
      "properties": {
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#"
              },
              {
                "$ref": "#/definitions/singleCondition"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
        },
        "type": {
          "enum": [
            "and",
            "AND",
            "or",
            "OR"
          ],
          "type": "string",
          "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
        }
      },
      "shortClassName": "compositeConditionBean",
      "type": "object",
      "title": "Composite Condition",
      "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
    },
    "dialog": {
      "properties": {
        "options": {
          "$ref": "#/definitions/dialogOptions",
          "fieldDescription": "\n\n<p>An object containing options for this dialog.</p>\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nSpecifies the URL of the content displayed in the dialog. The URL can be absolute or relative to either the\n product URL or the add-on's base URL, depending on the _context_ attribute.\n\n Your add-on can receive <a href=\"../../context-parameters/\">additional context</a> from the application by\n using variable tokens in the URL attribute.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        }
      },
      "required": [
        "url",
        "key"
      ],
      "shortClassName": "dialogModuleBean",
      "type": "object",
      "title": "Dialog",
      "description": "\n\n<p>A common dialog definition that may be referenced by other Connect modules and from JavaScript API calls.</p>\n\n <p>\n For example, take the following dialog module:\n </p>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n\n\n <p>\n This common dialog might be referenced from a <a href=\"../web-item-target/\">web item target</a>, so that\n triggering the web item launches the dialog:\n </p>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n\n\n <p>\n The common dialog might also be referenced when creating a Dialog manually with the\n <a href=\"../../jsapi/dialog/\">JavaScript API</a>:\n </p>\n <pre><code>\n AP.require('dialog', function(dialog){\n   dialog.create({\n     key: 'dialog-module-key'\n   }).on(\"close\", callbackFunc);\n });\n </code></pre>\n\n"
    },
    "inlineDialogOptions": {
      "properties": {
        "offsetX": {
          "type": "string",
          "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the x-axis in pixels\n\n"
        },
        "offsetY": {
          "type": "string",
          "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the y-axis in pixels\n\n"
        },
        "width": {
          "type": "string",
          "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
        },
        "onTop": {
          "type": "boolean",
          "fieldDescription": "\n\nDetermines if the dialog should be shown above the trigger or not. If this option is true but there is insufficient room above the trigger the inline-dialog will be flipped to display below it\n\n"
        },
        "showDelay": {
          "type": "integer",
          "fieldDescription": "\n\nDetermines how long in milliseconds after a show trigger is fired (such as a trigger click) until the dialog is shown\n\n"
        },
        "closeOthers": {
          "type": "boolean",
          "fieldDescription": "\n\nDetermines if all other dialogs on the screen are closed when this one is opened\n\n"
        },
        "persistent": {
          "type": "boolean",
          "fieldDescription": "\n\nThis option, ignores the 'closeOthers' option\n\n"
        },
        "onHover": {
          "type": "boolean",
          "fieldDescription": "\n\nDetermines whether the inline-Dialog will show on a mouseOver or mouseClick of the trigger\n\n"
        },
        "isRelativeToMouse": {
          "type": "boolean",
          "fieldDescription": "\n\nDetermines if the dialog should be shown relative to where the mouse is at the time of the event trigger (normally a click) if set to false the dialog will show aligned to the left of the trigger with the arrow showing at the center\n\n"
        }
      },
      "shortClassName": "inlineDialogOptions",
      "type": "object",
      "title": "Inline Dialog Options",
      "description": "\n\nOptions for an inline dialog target\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n"
    },
    "pageModule": {
      "properties": {
        "icon": {
          "$ref": "#/definitions/icon",
          "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels.\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "weight": {
          "type": "integer",
          "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
          "defaultValue": "100"
        },
        "location": {
          "type": "string",
          "fieldDescription": "\n\nThe location in the application interface where the page's link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console.\n\n Find product locations with the web fragment finder:\n\n <ul>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n If the <code>location</code> property is not specified, a default location is used:\n\n Jira:\n\n <ul> \n <li><code>generalPage</code>: system.top.navigation.bar</li>\n <li><code>adminPage</code>: advanced\\_menu\\_section/advanced_section</li>\n </ul> \n\n Confluence:\n\n <ul>\n <li><code>generalPage</code>: system.help/pages</li>\n <li><code>adminPage</code>: system.admin/marketplace_confluence</li>\n <li><code>profilePage</code>: system.profile</li>\n </ul>\n\n You may wish to have no link to the page shown anywhere - for example, if you are using the page as the\n target of a <a href=\"../../jsapi/dialog/\">JavaScript API dialog</a>.\n In this case, set the value of <code>location</code> to \"none\".\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/definitions/compositeCondition",
                "properties": {
                  "condition": {
                    "type": "string",
                    "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
                  },
                  "invert": {
                    "type": "boolean",
                    "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                    "defaultValue": "false"
                  },
                  "params": {
                    "additionalProperties": true,
                    "type": "object",
                    "fieldTitle": "Object",
                    "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
                  }
                },
                "required": [
                  "condition"
                ],
                "shortClassName": "singleConditionBean",
                "type": "object",
                "title": "Single Condition",
                "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
              },
              {
                "$ref": "#/definitions/singleCondition",
                "properties": {
                  "conditions": {
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "$ref": "#"
                        },
                        {
                          "$ref": "#/definitions/singleCondition"
                        }
                      ]
                    },
                    "type": "array",
                    "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                  },
                  "type": {
                    "enum": [
                      "and",
                      "AND",
                      "or",
                      "OR"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                  }
                },
                "shortClassName": "compositeConditionBean",
                "type": "object",
                "title": "Composite Condition",
                "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\nConditions can be added to display only when all the given conditions are true.\n\nThe supported conditions for pages are:\n\n<strong>Common conditions</strong>\n\n<ul>\n    <li><code>addon_property_exists</code></li>\n    <li><code>addon_property_equal_to</code></li>\n    <li><code>addon_property_equal_to_context</code></li>\n    <li><code>addon_property_contains_any</code></li>\n    <li><code>addon_property_contains_all</code></li>\n    <li><code>addon_property_contains_context</code></li>\n    <li><code>addon_property_contains_any_user_group</code></li>\n    <li><code>user_is_admin</code></li>\n    <li><code>user_is_logged_in</code></li>\n    <li><code>user_is_sysadmin</code></li>\n    <li><code>addon_is_licensed</code></li>\n    <li><code>feature_flag</code></li>\n</ul>\n\n<strong>Jira conditions</strong>\n\n<ul>\n    <li><code>entity_property_exists</code></li>\n    <li><code>entity_property_equal_to</code></li>\n    <li><code>entity_property_equal_to_context</code></li>\n    <li><code>entity_property_contains_any</code></li>\n    <li><code>entity_property_contains_all</code></li>\n    <li><code>entity_property_contains_context</code></li>\n    <li><code>entity_property_contains_any_user_group</code></li>\n    <li><code>can_use_application</code></li>\n    <li><code>project_type</code></li>\n    <li><code>has_global_permission</code></li>\n</ul>\n\n<strong>Confluence conditions</strong>\n\n<ul>\n    <li><code>content_property_exists</code></li>\n    <li><code>content_property_equal_to</code></li>\n    <li><code>content_property_equal_to_context</code></li>\n    <li><code>content_property_contains_any</code></li>\n    <li><code>content_property_contains_all</code></li>\n    <li><code>content_property_contains_context</code></li>\n    <li><code>content_property_contains_any_user_group</code></li>\n    <li><code>space_property_exists</code></li>\n    <li><code>space_property_equal_to</code></li>\n    <li><code>space_property_equal_to_context</code></li>\n    <li><code>space_property_contains_any</code></li>\n    <li><code>space_property_contains_all</code></li>\n    <li><code>space_property_contains_context</code></li>\n    <li><code>space_property_contains_any_user_group</code></li>\n</ul>\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nThe url to retrieve the content from.\n This must be relative to the add-on's baseUrl.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        }
      },
      "required": [
        "name",
        "url",
        "key"
      ],
      "maxProperties": 10000,
      "additionalProperties": false,
      "shortClassName": "connectPageModuleBean",
      "type": "object",
      "title": "Page",
      "description": "\n\n<p>Page modules allow add-ons to insert new pages into Atlassian products. These can be automatically resized to the width\n and height of your add-on's content. The location attribute defines where links to the new page appear.</p>\n\n <p>Each type of page displays differently:</p>\n <ul>\n <li><code>generalPages</code> - have no extra styling and by default a link to the page is displayed in the main navigation menu.\n Use these pages in order to display general content.</li>\n <li><code>adminPages</code> - display in the administration area. Appropriate menus and other styling appear around your content.\n Use these pages in order to provide extra administration functionality.</li>\n <li><code>jiraProjectPages</code> - (<strong>Jira only</strong>) appear in the project sidebar.\n Use these pages in order to provide project-specific content. The project page module has a separate documentation page here:\n [Project Page](https://developer.atlassian.com/cloud/jira/platform/modules/project-page/).</li>\n <li><code>profilePages</code> - (<strong>Confluence only</strong>) displayed as sections inside user profiles.\n Use these pages in order to display extra user profile information.</li>\n </ul>\n \n <p>You can also define page modules to be shown when a user is administering your add-on via the\n [Universal Plugin Manager](https://confluence.atlassian.com/x/z4Q5Eg). An add-on can only define a single page of\n each of these types. They should each be defined in the descriptor as a single JSON object, not as a JSON array like \n other modules.</p>\n <ul>\n <li><code>configurePage</code> - a \"Configure\" button will link to this page from the add-on's entry in <em>Manage Add-ons</em>.\n Use this page to provide configuration of the add-on itself.</li>\n <li><code>postInstallPage</code> - A \"Get Started\" button will link to this page from both the add-on's entry in <em>Manage Add-ons</em>\n and from the dialog that the user is shown when they successfully install the add-on. Use this page to provide introductory\n information about the add-on to the user.</li>\n </ul>\n\n\n <!-- ## Seamless iframes -->\n\n <p>The content for a page module is injected into the Atlassian application in the form of a \"seamless\" iframe.\n Seamless iframes are regular HTML iframes but with the characteristics described below.</p>\n\n <p>As implied here, for most page content modules, you do not need to be concerned with iframe sizing.\n It's all handled for you. However, an exception exists for inline macros.</p>\n <ul>\n <li>Their size is based on the page height and width inside the iframe (i.e., no scrollbars)</li>\n <li>They are dynamically resized based on the inner content or relative browser window sizing</li>\n <li>They appear without borders, making them look like a non-iframed fragment of the page</li>\n <li>For general-pages, you can also opt to size your iframe to take up all of the host product's available vertical space (instead of resizing to its internal content).</li>\n <li>To do this, add the <code>data-options</code> attribute <code>\"sizeToParent:true\"</code> in the script tag for <code>all.js</code>. It is also possible to hide footer for such pages.</li>\n <li>For example, using <a href=\"https://bitbucket.org/atlassian/atlassian-connect-express\">ACE</a>:\n\n   <pre><code>\n&lt;script src=&quot;{{hostScriptUrl}}&quot;\n       type=&quot;text/javascript&quot;\n       data-options=&quot;sizeToParent:true;hideFooter:true&quot;&gt;\n&lt;/script&gt;\n   </code></pre></li>\n </ul>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"generalPages\": [\n          {\n            \"url\": \"/my-general-page\",\n            \"icon\": {\n              \"width\": 80,\n              \"height\": 80,\n              \"url\": \"/maps/icon.png\"\n            },\n            \"name\": {\n              \"value\": \"My General Page\"\n            },\n            \"key\": \"my-general-page\"\n          }\n        ],\n        \"adminPages\": [\n          {\n            \"url\": \"/my-admin-page\",\n            \"name\": {\n              \"value\": \"My Admin Page\"\n            },\n            \"key\": \"my-admin-page\"\n          }\n        ],\n        \"configurePage\": {\n          \"url\": \"/my-config-page\",\n          \"name\": {\n            \"value\": \"My Configure Page\"\n          },\n          \"key\": \"my-config-page\"\n        },\n        \"postInstallPage\": {\n          \"url\": \"/my-post-install-page\",\n          \"name\": {\n            \"value\": \"My Post-Install Page\",\n            \"i18n\": \"mypostinstallpage.name\"\n          },\n          \"key\": \"my-post-install-page\"\n        },\n        \"profilePages\": [\n          {\n            \"url\": \"/my-confluence-user-profile-page\",\n            \"name\": {\n              \"value\": \"My Confluence User Profile Page\"\n            },\n            \"key\": \"my-confluence-user-profile-page\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "dialogModuleOptions": {
      "properties": {
        "key": {
          "type": "string",
          "fieldDescription": "\n\n<p>The key of a <a href=\"../dialog/\">Dialog</a> module declared in this Connect add-on.</p>\n\n <p>\n The dialog module will include the <a href=\"../dialog-options/\">Dialog Options</a>\n that would otherwise need to be specified directly in this options object.\n </p>\n\n"
        }
      },
      "required": [
        "key"
      ],
      "shortClassName": "dialogModuleOptions",
      "type": "object",
      "title": "Dialog Module Options",
      "description": "\n\nOptions for a web-item targeting a common <a href=\"../dialog/\">dialog module</a>.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n"
    },
    "container": {
      "properties": {
        "backgroundClip": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background clip property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\">background-clip</a> MDN reference for details.\n\n"
        },
        "padding": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the padding property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied to the content background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "backgroundAttachment": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background attachment property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\">background-attachment</a> MDN reference for details.\n\n"
        },
        "borderRadius": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the border radius property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "background": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background shorthand property to set all the background properties in one declaration.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/background\">background</a> MDN reference for details.\n\n"
        },
        "backgroundImage": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background image property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\">background-image</a> MDN reference for details.\n\n"
        },
        "backgroundSize": {
          "pattern": "auto|cover|contain|initial|inherit|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background repeat property to be applied for the content view.<br>\n Values must contain \"auto\", \"cover\", \"contain\", \"initial\", \"inherit\", length or percentage.<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> MDN reference for details.\n\n"
        },
        "backgroundPosition": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background position property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\">background-position</a> MDN reference for details.\n\n"
        },
        "backgroundBlendMode": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background blend mode property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode\">background-blend-more</a> MDN reference for details.\n\n"
        },
        "backgroundRepeat": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background size property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\">background-repeat</a> MDN reference for details.\n\n"
        },
        "backgroundOrigin": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background origin property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin\">background-origin</a> MDN reference for details.\n\n"
        }
      },
      "required": [
        "padding",
        "borderRadius"
      ],
      "shortClassName": "containerBean",
      "type": "object",
      "title": "Container",
      "description": "\n\n<p>\n  Defines styles to be applied to the container of content view.\n </p>\n <p>\n  The supported properties include shorthand <i>background</i> and all CSS background properties.\n  The keys are the camelCased versions of corresponding CSS properties, like <i>backgroundImage</i>,\n  <i>backgroundColor</i>, <i>backgroundSize</i>, <i>backgroundPosition</i>, <i>backgroundRepeat</i>,\n  <i>backgroundClip</i>, <i>backgroundOrigin</i>, <i>backgroundAttachment</i>, and <i>backgroundBlendMode</i>.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"padding\": \"0 20px\",\n      \"borderRadius\": \"10px\",\n      \"background\": \"#F4D4D8\"\n    }\n\n\n"
    },
    "customContentUISupport": {
      "properties": {
        "editComponentTitlePlaceholder": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nDefines a placeholder for title input box that will be used in the edit component.\n Following variables will be replaced at runtime:\n <ul>\n     <li><code>{spaceName}</code>: Name of the current space</li>\n     <li><code>{spaceKey}</code>: Key of the current space</li>\n     <li><code>{contentTypeName}</code>: Name of the current custom content</li>\n </ul>\n\n For example: <br>\n \"What do you want to know about {SpaceName}\" will become \"What do you want to know about Demonstration Space\"\n if user is creating a new piece of custom content in \"Demonstration Space\" space.\n\n"
        },
        "listViewComponent": {
          "$ref": "#/definitions/componentReference",
          "fieldDescription": "\n\nDefines a module that will be used when user clicks the navigation link displayed in the space sidebar.<br>\n The module referenced must be a <a href=\"../page/\">generalPage</a>.\n A default list view will be provided if no view component was specified in this field.\n\n"
        },
        "editComponent": {
          "$ref": "#/definitions/componentReference",
          "fieldDescription": "\n\nDefines a module for adding or editing custom content.<br>\n The module referenced must be a <a href=\"../page/\">generalPage</a>.\n Following context variable will be provided to the edit component URL\n <ul>\n     <li><code>customcontent.create</code>: Indicates whether user is creating or editing a piece of custom content</li>\n </ul>\n Please consult <a href=\"../../context-parameters/\">Context Parameters</a> for how to use a context variable.\n\n Confluence will provide the breadcrumbs, title input, submit and cancel button on the edit component.\n Add-on needs to supply the editor area like the screenshot shown below in a general page module.<br>\n Please refer to the <a href=\"../../jsapi/custom-content/\">Custom Content JavaScript API</a>\n for how to intercept the edit component events and override the default behavior.\n\n <img src=\"/cloud/connect/images/confluence-customcontent-edit.png\" alt=\"Custom Content Edit Component\" width=\"80%\" style=\"border:1px solid #999;margin-top:10px;width:500px\">\n\n"
        },
        "icons": {
          "properties": {
            "item": {
              "$ref": "#/definitions/icon",
              "fieldDescription": "\n\nDefines an icon that used for displaying a single custom content item in:\n <ul>\n     <li>View attachments screen when the custom content is contained in a page. </li>\n     <li>Result entry of site search.</li>\n     <li>Result entry of quick search.</li>\n </ul>\n The icon resource provided in this field must be larger or equals to 16x16 pixels.<br>\n\n"
            },
            "create": {
              "$ref": "#/definitions/icon",
              "fieldDescription": "\n\nDefines an icon that is used for custom content items in the create dialog.<br>\n The icon resource provided in this field must be larger or equals to 48x48 pixels.<br>\n It will fallback to item icon if this field is not specified.\n In that case, please ensure the item icon is larger or equals to 48x48 pixels.\n\n"
            },
            "list": {
              "$ref": "#/definitions/icon",
              "fieldDescription": "\n\nDefines an icon that used for displaying list of custom content items in:\n <ul>\n <li>Space sidebar if this custom content is allowed to be contained in space. </li>\n </ul>\n The icon resource provided in this field must be larger or equals to 20x20 pixels.<br>\n It will fallback to item icon if this field is not specified.\n In that case, please ensure the item icon is larger or equals to 20x20 pixels.\n\n"
            }
          },
          "required": [
            "item"
          ],
          "shortClassName": "customContentIconsBean",
          "type": "object",
          "title": "Custom Content Icons",
          "description": "\n\nDefines icons that used for displaying the custom content.\n\n\n\n\n\n    {\n      \"item\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/item.png\"\n      }\n    }\n\n\n",
          "fieldDescription": "\n\nDefines icons used for displaying the content.\n\n"
        },
        "contentViewComponent": {
          "$ref": "#/definitions/componentReference",
          "fieldDescription": "\n\nDefines a module for viewing custom content.<br>\n The module referenced must be a <a href=\"../page/\">generalPage</a>.\n\n The view component will get displayed in following places:\n <ul>\n     <li>\n         <b>Search result</b><br>\n         When user clicks the title of a custom content entry in site search result.\n     </li>\n </ul>\n\n"
        },
        "editComponentSubmitButtonLabel": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nDefines the label for submit button on edit component\n\n"
        },
        "editComponentCancelButtonLabel": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nDefines the label for cancel button on edit component\n\n"
        },
        "breadcrumbs": {
          "properties": {
            "relations": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string",
                    "fieldDescription": "\n\nName of the content relation\n\n"
                  }
                },
                "shortClassName": "customContentRelationBean",
                "type": "object",
                "title": "Custom Content Relation",
                "description": "\n\nA reference to a custom content relation\n\n\n\n\n\n    {\n      \"name\": \"worksFor\"\n    }\n\n\n"
              },
              "type": "array",
              "fieldDescription": "\n\nDefines the list of content relations used for generating breadcrumbs<br>\n Following sorting orders will apply:\n <ul>\n     <li><b>Relationships defined in different names</b>: Sorted by the order defined in this field</li>\n     <li><b>Relationships defined in the same name</b>: Sorted by creation time of the relation</li>\n </ul>\n\n"
            }
          },
          "shortClassName": "customContentBreadcrumbsBean",
          "type": "object",
          "title": "Custom Content Breadcrumbs",
          "description": "\n\nDefines the breadcrumbs for this content<br>\n\n <h3>Use Relation API to generate breadcrumbs</h3>\n An add-on can specify multiple content relationships for generating the breadcrumbs.\n Suppose we have <code>ac:add-on-key:employee</code> defined with following breadcrumbs setting:\n <pre><code>\n ...\n \"breadcrumbs\": {\n   \"relations\": [\n     {\n       \"name\": \"worksFor\"\n     }\n   ]\n }\n ...\n </code></pre>\n\n And we have following custom content created in the Confluence:\n <table summary=\"Example custom content for building search breadcrumbs\">\n     <tr>\n        <th>Content ID</th>\n        <th>Content Type</th>\n        <th>Title</th>\n     </tr>\n     <tr>\n        <td>1</td>\n        <td>ac:add-on-key:organization</td>\n        <td>Company A</td>\n     </tr>\n     <tr>\n        <td>2</td>\n        <td>ac:add-on-key:organization</td>\n        <td>Company B</td>\n     </tr>\n     <tr>\n        <td>3</td>\n        <td>ac:add-on-key:employee</td>\n        <td>Charlie</td>\n     </tr>\n </table>\n\n By using the <a href=\"https://docs.atlassian.com/confluence/REST/latest/#relation\">Relation API</a> we can create following relations between these content:\n <ul>\n     <li><b>Charlie works for Company A</b>: PUT /rest/relation/worksFor/from/content/3/to/content/1</li>\n     <li><b>Charlie works for Company B</b>: PUT /rest/relation/worksFor/from/content/3/to/content/2</li>\n </ul>\n\n Since we have let <code>ac:add-on-key:employee</code> to use <code>worksFor</code> relation to generate the breadcrumbs.\n Confluence will fetch the relations that were created under name <code>worksFor</code>,\n then display the titles in the creation order of their relations in the search result like this:\n <img src=\"/cloud/connect/images/confluence-quick-search-breadcrumbs.png\" alt=\"Quick search breadcrumbs\" style=\"border:1px solid #999;margin-top:10px;width:500px\">\n\n Similarly the site search will display the breadcrumbs as well:\n <img src=\"/cloud/connect/images/confluence-search-breadcrumbs.png\" alt=\"Quick search breadcrumbs\" style=\"border:1px solid #999;margin-top:10px;width:500px\">\n\n",
          "fieldDescription": "\n\nDefines the breadcrumbs used in\n <ul>\n     <li>Result of quick search dropdown</li>\n     <li>Result of site search</li>\n </ul>\n\n"
        }
      },
      "required": [
        "icons",
        "contentViewComponent"
      ],
      "shortClassName": "customContentUISupportBean",
      "type": "object",
      "title": "Custom Content UI Support",
      "description": "\n\nDeclares information related for rendering the custom content in the UI. <br>\n Add-ons have the ability to control the UI components for user to view the custom content.\n\n\n\n\n\n    {\n      \"contentViewComponent\": {\n        \"addonKey\": \"addon-key\",\n        \"moduleKey\": \"general-page-module-key\"\n      }\n    }\n\n\n\n\n <h3>View component example</h3>\n Suppose we already defined a general page module like following:\n\n\n\n\n\n    {\n      \"url\": \"/my-general-page?content.plugin={content.plugin}&content.id={content.id}&content.version={content.version}&space.key={space.key}&customParameter={ac.customData}\",\n      \"name\": {\n        \"value\": \"My viewer page\"\n      },\n      \"key\": \"my-viewer\"\n    }\n\n\n\n\n And also the general page is used as a view component in ui support section.\n\n\n\n\n\n    {\n      \"contentViewComponent\": {\n        \"moduleKey\": \"my-viewer\"\n      }\n    }\n\n\n\n\n When user clicks the title of the corresponding custom content in the search result.\n <code>/my-general-page</code> will be rendered in a iframe with following context parameters being passed.<br>\n <ul>\n     <li><code>content.plugin</code>: The content type key of the content. eg: <code>ac:addon-key:module-key</code></li>\n     <li><code>content.id</code>: The id of the content</li>\n     <li><code>content.version</code>: The version of the content</li>\n     <li><code>space.key</code>: The key of the space which content is contained in</li>\n </ul>\n Note, that if an optional custom value is defined in the url string, such as  <code>{ac.customData}</code> in the example above, it will be substituted with the value\n of the <code>ac.customData</code> parameter that will be taken from the Confluence's current URL. Add-on developers can specify any number of custom parameters, provided that they\n have names that follow this convention: <code>ac.parameter_name</code>.\n If more than one custom parameter with the same name is defined in Confluence's current URL, only the first value will be used.\n For additional information on custom parameters see <a href=\"../../context-parameters/#add-on-specific-context-parameters\">Context Parameters</a>.\n\n <h3>Context Parameters</h3>\n View components support Confluence context parameters. When rendering the view component\n the context variables will be passed to the URL that is defined in the corresponding view component module.<br>\n You can retrieve the content or space information with these parameters via Confluence REST API\n and render it according to your needs.<br>\n Please consult <a href=\"../../context-parameters/\">Context Parameters</a> for what parameters are currently supported.\n\n"
    },
    "spaceTools": {
      "properties": {
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "weight": {
          "type": "integer",
          "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
          "defaultValue": "100"
        },
        "location": {
          "type": "string",
          "fieldDescription": "\n\nThe sub-section where this Space Tools Tab should appear. The primary section for Space Tabs is\n `system.space.tools`, and the location specified here will be beneath that. e.g setting a location of\n \"contenttools\" will result in a final location of `system.space.tools/contenttools`.\n\nConfluence comes the following standard sections in Space Tools:\n\n * system.space.tools/overview\n * system.space.tools/permissions\n * system.space.tools/contenttools\n * system.space.tools/lookandfeel\n * system.space.tools/integrations\n * system.space.tools/addons\n\nIn future, Connect add-ons will be able to define new web sections, which will enable add-ons to define new\n sub-sections for Space Tools.\n\nLegacy Space Admin section cannot be defined, and is always system.space.admin/spaceops\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/definitions/singleCondition"
              },
              {
                "$ref": "#/definitions/compositeCondition"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nThe url to retrieve the content from.\n This can be absolute or relative to the add-on's baseUrl\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        }
      },
      "required": [
        "name",
        "url",
        "key"
      ],
      "shortClassName": "spaceToolsTabModuleBean",
      "type": "object",
      "title": "Space Tools Tab",
      "description": "\n\nSpace Tools Tab modules enable add-ons to insert tabs into Confluence Space Tools area. These can be automatically\n resized to the width and height of your add-on's content. The location attribute defines which section the tab will\n appear.\n\n Spaces page with the Documentation Theme do not support the Space Tools area, and instead display the\n legacy Space Admin area. This module will insert a tab in a pre-defined location in Space Admin (look below for a \n complete list of existing locations).\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"spaceToolsTabs\": [\n          {\n            \"url\": \"/space-tools-tab?space_key={space.key}\",\n            \"location\": \"contenttools\",\n            \"name\": {\n              \"value\": \"Space Tools Tab\"\n            },\n            \"key\": \"my-space-tools-tab\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "link": {
      "properties": {
        "altText": {
          "type": "string",
          "fieldDescription": "\n\nAlternative text that is shown when the element cannot be rendered.\n\n"
        },
        "title": {
          "type": "string",
          "fieldDescription": "\n\nThe title of the link.\n\n"
        },
        "url": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nThe URL of the link. It can be absolute, or relative to the Add-On base URL.\n\n"
        }
      },
      "required": [
        "url"
      ],
      "shortClassName": "linkBean",
      "type": "object",
      "title": "Link",
      "description": "\n\nRepresents a link, its optional title and alternative text.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"link\": {\n        \"url\": \"/go-somewhere\",\n        \"title\": \"Go Somewhere\",\n        \"altText\": \"somewhere\"\n      }\n    }\n\n\n"
    },
    "screen": {
      "properties": {
        "gutterTop": {
          "pattern": "none|default|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the gutter top property to be applied on the content view.<br>\n The valid values include \"none\", \"default\", length or percentage.\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied to the content background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "backgroundAttachment": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background attachment property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\">background-attachment</a> MDN reference for details.\n\n"
        },
        "backgroundImage": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background image property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\">background-image</a> MDN reference for details.\n\n"
        },
        "layer": {
          "$ref": "#/definitions/layer",
          "fieldDescription": "\n\n"
        },
        "gutterRight": {
          "pattern": "none|default|small|medium|large",
          "type": "string",
          "fieldDescription": "\n\nDeclares the gutter right property to be applied on the content view.<br>\n The valid values include \"none\", \"default\", \"small\", \"medium\", \"large\".<br>\n\n"
        },
        "gutterLeft": {
          "pattern": "none|default|small|medium|large",
          "type": "string",
          "fieldDescription": "\n\nDeclares the gutter left property to be applied on the content view.<br>\n The valid values include \"none\", \"default\", \"small\", \"medium\", \"large\".\n\n"
        },
        "backgroundClip": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background clip property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\">background-clip</a> MDN reference for details.\n\n"
        },
        "background": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background shorthand property to set all the background properties in one declaration.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/background\">background</a> MDN reference for details.\n\n"
        },
        "backgroundSize": {
          "pattern": "auto|cover|contain|initial|inherit|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background repeat property to be applied for the content view.<br>\n Values must contain \"auto\", \"cover\", \"contain\", \"initial\", \"inherit\", length or percentage.<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> MDN reference for details.\n\n"
        },
        "backgroundPosition": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background position property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\">background-position</a> MDN reference for details.\n\n"
        },
        "backgroundBlendMode": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background blend mode property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode\">background-blend-more</a> MDN reference for details.\n\n"
        },
        "backgroundRepeat": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background size property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\">background-repeat</a> MDN reference for details.\n\n"
        },
        "backgroundOrigin": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background origin property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin\">background-origin</a> MDN reference for details.\n\n"
        },
        "gutterBottom": {
          "pattern": "none|default|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the gutter bottom property to be applied on the content view.<br>\n The valid values include \"none\", \"default\", length or percentage.\n\n"
        }
      },
      "required": [
        "gutterRight",
        "gutterLeft",
        "gutterTop",
        "gutterBottom"
      ],
      "shortClassName": "screenBean",
      "type": "object",
      "title": "Screen",
      "description": "\n\n<p>\n  Defines styles to be applied on the underlay of content view.\n </p>\n <p>\n  The supported properties include shorthand <i>background</i> and all CSS background element properties.\n  The keys are the camelCased versions of corresponding CSS properties, like <i>backgroundImage</i>,\n  <i>backgroundColor</i>, <i>backgroundSize</i>, <i>backgroundPosition</i>, <i>backgroundRepeat</i>,\n  <i>backgroundClip</i>, <i>backgroundOrigin</i>, <i>backgroundAttachment</i>, and <i>backgroundBlendMode</i>.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"layer\": {\n        \"width\": \"100%\",\n        \"height\": \"250px\",\n        \"backgroundImage\": \"url('http://path/to/img/skyline.jpg')\",\n        \"backgroundSize\": \"cover\",\n        \"backgroundRepeat\": \"no-repeat\"\n      },\n      \"gutterTop\": \"20px\",\n      \"gutterRight\": \"small\",\n      \"gutterBottom\": \"10px\",\n      \"gutterLeft\": \"small\",\n      \"background\": \"linear-gradient(45deg, rgba(176,104,112,1) 0%, rgba(244,212,216,1) 100%)\"\n    }\n\n\n"
    },
    "contentHeader": {
      "properties": {
        "backgroundClip": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background clip property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\">background-clip</a> MDN reference for details.\n\n"
        },
        "padding": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the padding property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied to the content background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "backgroundAttachment": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background attachment property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\">background-attachment</a> MDN reference for details.\n\n"
        },
        "borderRadius": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the border radius property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "background": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background shorthand property to set all the background properties in one declaration.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/background\">background</a> MDN reference for details.\n\n"
        },
        "backgroundImage": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background image property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\">background-image</a> MDN reference for details.\n\n"
        },
        "backgroundSize": {
          "pattern": "auto|cover|contain|initial|inherit|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background repeat property to be applied for the content view.<br>\n Values must contain \"auto\", \"cover\", \"contain\", \"initial\", \"inherit\", length or percentage.<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> MDN reference for details.\n\n"
        },
        "backgroundPosition": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background position property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\">background-position</a> MDN reference for details.\n\n"
        },
        "backgroundBlendMode": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background blend mode property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode\">background-blend-more</a> MDN reference for details.\n\n"
        },
        "backgroundRepeat": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background size property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\">background-repeat</a> MDN reference for details.\n\n"
        },
        "backgroundOrigin": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background origin property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin\">background-origin</a> MDN reference for details.\n\n"
        }
      },
      "required": [
        "padding",
        "borderRadius"
      ],
      "shortClassName": "contentHeaderBean",
      "type": "object",
      "title": "ContentHeader",
      "description": "\n\n<p>\n  Defines styles to be applied on the header of content view.\n </p>\n <p>\n  The supported properties include shorthand <i>background</i> and all CSS background properties.\n  The keys are the camelCased versions of corresponding CSS properties, like <i>backgroundImage</i>,\n  <i>backgroundColor</i>, <i>backgroundSize</i>, <i>backgroundPosition</i>, <i>backgroundRepeat</i>,\n  <i>backgroundClip</i>, <i>backgroundOrigin</i>, <i>backgroundAttachment</i>, and <i>backgroundBlendMode</i>.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"padding\": \"20px 0 90px 20px\",\n      \"borderRadius\": \"5px 5px 0 0\",\n      \"backgroundColor\": \"rgba(0, 0, 0, 0.2)\"\n    }\n\n\n"
    },
    "secondaryNavigation": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the color to be applied to the button background on the navigation.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "hoverOrFocus": {
          "$ref": "#/definitions/hoverOrFocus",
          "fieldDescription": "\n\nDeclares the style to be applied to the navigation when it is hovered or focused.\n\n"
        }
      },
      "required": [
        "color",
        "hoverOrFocus"
      ],
      "shortClassName": "secondaryNavigationBean",
      "type": "object",
      "title": "SecondaryNavigation",
      "description": "\n\nDefines styles to be applied on the secondary navigation.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"hoverOrFocus\": {\n        \"backgroundColor\": \"#863647\",\n        \"color\": \"#FFFFFF\"\n      },\n      \"color\": \"#000000\"\n    }\n\n\n"
    },
    "body": {
      "properties": {
        "backgroundClip": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background clip property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\">background-clip</a> MDN reference for details.\n\n"
        },
        "padding": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the padding property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied to the content background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "backgroundAttachment": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background attachment property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\">background-attachment</a> MDN reference for details.\n\n"
        },
        "borderRadius": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the border radius property to be applied on the container, body, header of content view.<br>\n The format of inputs should be in CSS style where the input can have from one to four elements\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "background": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background shorthand property to set all the background properties in one declaration.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/background\">background</a> MDN reference for details.\n\n"
        },
        "backgroundImage": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background image property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\">background-image</a> MDN reference for details.\n\n"
        },
        "backgroundSize": {
          "pattern": "auto|cover|contain|initial|inherit|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background repeat property to be applied for the content view.<br>\n Values must contain \"auto\", \"cover\", \"contain\", \"initial\", \"inherit\", length or percentage.<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> MDN reference for details.\n\n"
        },
        "backgroundPosition": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background position property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\">background-position</a> MDN reference for details.\n\n"
        },
        "backgroundBlendMode": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background blend mode property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode\">background-blend-more</a> MDN reference for details.\n\n"
        },
        "backgroundRepeat": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background size property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\">background-repeat</a> MDN reference for details.\n\n"
        },
        "backgroundOrigin": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background origin property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin\">background-origin</a> MDN reference for details.\n\n"
        }
      },
      "required": [
        "padding",
        "borderRadius"
      ],
      "shortClassName": "contentBodyBean",
      "type": "object",
      "title": "Body",
      "description": "\n\n<p>\n  Defines styles to be applied on the body of content view.\n </p>\n <p>\n  The supported properties include <i>background</i> shorthand property and all CSS background element properties.\n  The keys are the camelCased versions of corresponding CSS properties, like <i>backgroundImage</i>,\n  <i>backgroundColor</i>, <i>backgroundSize</i>, <i>backgroundPosition</i>, <i>backgroundRepeat</i>,\n  <i>backgroundClip</i>, <i>backgroundOrigin</i>, <i>backgroundAttachment</i>, and <i>backgroundBlendMode</i>.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"padding\": \"10px\",\n      \"borderRadius\": \"0 0 5px 5px\",\n      \"background\": \"#FFFFFF\"\n    }\n\n\n"
    },
    "staticContentMacro": {
      "properties": {
        "bodyType": {
          "enum": [
            "rich-text",
            "RICH-TEXT",
            "plain-text",
            "PLAIN-TEXT",
            "none",
            "NONE"
          ],
          "type": "string",
          "fieldDescription": "\n\nThe type of body content, if any, for this macro.\n\n",
          "defaultValue": "none"
        },
        "editor": {
          "properties": {
            "insertTitle": {
              "$ref": "#/definitions/i18nProperty",
              "fieldDescription": "\n\nAn optional title that will be shown in the edit dialog header for a new macro.\n\n"
            },
            "editTitle": {
              "$ref": "#/definitions/i18nProperty",
              "fieldDescription": "\n\nAn optional title that will be shown in the edit dialog header for an existing macro.\n\n"
            },
            "width": {
              "type": "string",
              "fieldDescription": "\n\nThe preferred width of the edit dialog, e.g. ``500px``.\n\n"
            },
            "url": {
              "format": "uri-template",
              "type": "string",
              "fieldDescription": "\n\nThe URL to the macro configuration page in the add-on.\n\n"
            },
            "height": {
              "type": "string",
              "fieldDescription": "\n\nThe preferred height of the edit dialog, e.g. ``300px``.\n\n"
            }
          },
          "required": [
            "url"
          ],
          "shortClassName": "macroEditorBean",
          "type": "object",
          "title": "Macro Editor",
          "description": "\n\nMacro Parameters go a long way when it comes to macro configuration, but there are cases\n when a macro add-on needs more control over the UI.\n\n Defining a Macro Editor allows you to implement a custom UI for the macro, by specifying a\n URL to a page in your add-on which will be shown in the dialog iFrame.\n\n In order to persist custom data in your macro editor, use the Javascript\n [Confluence API](../../jsapi/confluence/) and the [Dialog API](../../jsapi/dialog/).\n For example:\n\n\n    AP.require([\"confluence\", \"dialog\"], function (confluence, dialog) {\n        function onSubmit() {\n            var macroParams = {\n                myParameter: value\n            };\n            confluence.saveMacro(macroParams);\n            confluence.closeMacroEditor();\n            return true;\n        }\n\n        dialog.getButton(\"submit\").bind(onSubmit);\n    });\n\n In order to retrieve the custom data again when the editor is opened, use `confluence.getMacroData` (see\n [Confluence API](../../jsapi/confluence/)):\n\n    AP.require(\"confluence\", function (confluence) {\n        var macroData = confluence.getMacroData(function(macroParams) {\n            doSomethingWith(macroParams.myParameter);\n        });\n    });\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"editor\": {\n        \"url\": \"/generate_md\",\n        \"editTitle\": {\n          \"value\": \"Edit MarkDown\"\n        },\n        \"insertTitle\": {\n          \"value\": \"Insert New MarkDown\"\n        },\n        \"width\": \"400px\",\n        \"height\": \"300px\"\n      }\n    }\n\n\n",
          "fieldDescription": "\n\nThe configuration of a custom macro editor. This is useful if the parameter input field types are\n not sufficient to configure the macro.\n\n"
        },
        "featured": {
          "type": "boolean",
          "fieldDescription": "\n\nWhether the macro should be \"featured\", meaning having an additional link in the \"Insert More Content\" menu in the editor toolbar.\n\n",
          "defaultValue": "false"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nDefine aliases for the macro. The macro browser will open for the defined aliases as if it were this macro.\n\n"
        },
        "hidden": {
          "type": "boolean",
          "fieldDescription": "\n\nIf set to true, the macro will not appear in the macro browser.\n\n",
          "defaultValue": "false"
        },
        "documentation": {
          "$ref": "#/definitions/link",
          "fieldDescription": "\n\nA link to the documentation for the macro.\n\n"
        },
        "icon": {
          "$ref": "#/definitions/icon",
          "fieldDescription": "\n\nA link to the icon resource (80x80 pixels) that will be shown in the macro selection dialog.\n The URL can be absolute or relative to the add-on base URL.\n\n"
        },
        "description": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA description of the macro's functionality.\n\n"
        },
        "outputType": {
          "enum": [
            "block",
            "BLOCK",
            "inline",
            "INLINE"
          ],
          "type": "string",
          "fieldDescription": "\n\nHow this macro should be placed along side other page content.\n\n",
          "defaultValue": "block"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nThe link to the add-on resource that provides the macro content.\n This URL has to be relative to the add-on base URL.\n\n Additional context parameters can be passed as variables in the URL:\n <pre><code>\n {\n   \"url\": \"/macro-renderer?body={macro.body}&amp;space_id={space.id}&amp;page_id={page.id}\"\n }\n </code></pre>\n\n Since macro bodies can be of arbitrary size and may contain sensitive data, care must be taken\n as to how its passed to your connect add-on.  You have three options to gain access to the body:\n\n - If you can predict the size of your body and it is consistently less than 128 characters, you\n can include it in the GET request using the `{macro.body}` parameter.\n - If you know your macro contains a body that will often exceed the 128 character threshold\n (or is known to contain sensitive data), then you can include the `{macro.id}` parameter and\n use the Confluence REST api to call back to collect the body.\n - If you want, you can include, `{macro.body}`, `{macro.id}`, and `{macro.truncated}`. This way\n your plugin can call back to confluence only if `{macro.truncated}` is '`true`'.  This will allow\n you to skip the callback if it's not needed.  This would be useful for macros that don't\n contain sensitive data of an unpredictable size.\n\n\n__Note:__ If you include the `{macro.body}` in your URL you are potentially leaking sensitive data\n to any intermediate host on the internet.  This may result in the body being cached or indexed\n by a third party.  If you are concerned about the security of your macro, you should always use\n the `{macro.id}` and use the Confluence REST API to collect the body.\n\n Here's an example:\n\n Declare the variables that are later required to fetch the macro content in the URL:\n <pre><code>\n {\n   \"url\": \"/render-macro?pageId={page.id}&amp;pageVersion={page.version}&amp;macroId={macro.id}\"\n }\n </code></pre>\n\n Then use the Confluence REST API to collect the body, for example directly from the iframe:\n <pre><code>\n AP.require(\"request\", function(request) {\n     var pageId = getUrlParameter(\"pageId\");\n     var pageVersion = getUrlParameter(\"pageVersion\");\n     var macroId = getUrlParameter(\"macroId\");\n     request({\n         url: \"/rest/api/content/\" + pageId +\n              \"/history/\" + pageVersion +\n              \"/macro/id/\" + macroId,\n         success: function(response) {\n             var macro = JSON.parse(response);\n             process(macro.body);\n         }\n     });\n });\n </code></pre>\n\n __Preview Mode:__ If you use the `{macro.id}` in your URL, the REST api will not return the macro body during\n a preview request, because the page has not been saved yet. You can use the `{output.type}` parameter to detect\n whether the macro is rendered in preview mode and adapt the response accordingly.\n\n __Note:__ `macro.body` will not be truncated when `renderingMethod` field was set to `POST` in static content macro.\n Refer to the [`Static Content Macros`](../static-content-macro/) for information on\n how to set this field.\n\n Currently supported variables for macros are:\n\n - `macro.hash`: The hash of the macro body (deprecated, use the macro.id)\n - `macro.id`: The id of the macro\n - `macro.body`: The macro body, truncated to 128 characters\n - `macro.truncated`: True if the macro body was truncated, false of not\n - `page.id`: The page ID, e.g. `1376295`\n - `page.title`: The page title, e.g. `My Page`\n - `page.type`: The page type, e.g. `page`\n - `page.version`: The page version, e.g. `6`\n - `space.id`: The space ID, e.g. `65537`\n - `space.key`: The space key, e.g. `AC`\n - `user.id`: The user ID, e.g. `admin`\n - `user.key`: The user key, e.g. `ff80808143087d180143087d3a910004`\n - `output.type`: The output type, e.g. `display` or `preview`\n\nContext parameters for macros are also required in the URL. Please see the\n [Macro Input Parameter](../macro-input-parameter/) documentation for details.\n\n"
        },
        "propertyPanel": {
          "properties": {
            "controls": {
              "items": {
                "type": "object",
                "anyOf": [
                  {
                    "properties": {
                      "controls": {
                        "items": {
                          "properties": {
                            "label": {
                              "$ref": "#/definitions/i18nProperty",
                              "fieldDescription": "\n\nText which will appear inside the button\n\n"
                            },
                            "type": {
                              "enum": [
                                "button",
                                "BUTTON"
                              ],
                              "type": "string",
                              "fieldDescription": "\n\nThe type field must be set to 'button'\n\n"
                            },
                            "key": {
                              "pattern": "^[a-zA-Z0-9-]+$",
                              "type": "string",
                              "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                            }
                          },
                          "required": [
                            "label",
                            "type",
                            "key"
                          ],
                          "additionalProperties": true,
                          "shortClassName": "buttonControlBean",
                          "type": "object",
                          "title": "ButtonControl",
                          "description": "\n\nDefines a button which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                        },
                        "type": "array",
                        "fieldDescription": "\n\nControls which will appear in the control group\n\n"
                      },
                      "type": {
                        "enum": [
                          "group",
                          "GROUP"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'group'\n\n"
                      }
                    },
                    "required": [
                      "controls",
                      "type"
                    ],
                    "shortClassName": "controlGroupBean",
                    "type": "object",
                    "title": "ControlGroup",
                    "description": "\n\nDefines a ControlGroup which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    [\n      {\n        \"type\": \"group\",\n        \"controls\": [\n          {\n            \"type\": \"button\",\n            \"label\": {\n              \"value\": \"My Custom Control 0\"\n            },\n            \"key\": \"my-custom-control-0\"\n          },\n          {\n            \"type\": \"button\",\n            \"label\": {\n              \"value\": \"My Custom Control 1\"\n            },\n            \"key\": \"my-custom-control-1\"\n          }\n        ]\n      }\n    ]\n\n\n"
                  },
                  {
                    "properties": {
                      "controls": {
                        "items": {
                          "properties": {
                            "macroParameterValue": {
                              "type": "string",
                              "fieldDescription": "\n\nThe value that will be assigned to a macro parameter when this toggle is clicked\n\n"
                            },
                            "label": {
                              "$ref": "#/definitions/i18nProperty",
                              "fieldDescription": "\n\nText which will appear inside the button\n\n"
                            },
                            "type": {
                              "enum": [
                                "togglebutton",
                                "TOGGLEBUTTON"
                              ],
                              "type": "string",
                              "fieldDescription": "\n\nThe type field must be set to 'togglebutton'\n\n"
                            },
                            "key": {
                              "pattern": "^[a-zA-Z0-9-]+$",
                              "type": "string",
                              "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                            }
                          },
                          "required": [
                            "macroParameterValue",
                            "label",
                            "type",
                            "key"
                          ],
                          "additionalProperties": true,
                          "shortClassName": "macroToggleButtonControlBean",
                          "type": "object",
                          "title": "ToggleButtonControl",
                          "description": "\n\nDefines a toggle button which appears inside a ToggleGroup\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"togglebutton\",\n      \"macroParameterValue\": \"macroParameterValue 0\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-toggle-button-0\"\n    }\n\n\n"
                        },
                        "type": "array",
                        "fieldDescription": "\n\nToggle buttons which will appear in the toggle group\n\n"
                      },
                      "macroParameter": {
                        "pattern": "[-_a-z0-9\\.]+",
                        "type": "string",
                        "fieldDescription": "\n\nThe macro parameter identifier used to store the toggle state.\n It must only contain lowercase alphanumeric characters, dashes, underscores, dots and must not contain any spaces.\n\n"
                      },
                      "type": {
                        "enum": [
                          "togglegroup",
                          "TOGGLEGROUP"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'togglegroup'\n\n"
                      }
                    },
                    "required": [
                      "controls",
                      "macroParameter",
                      "type"
                    ],
                    "shortClassName": "macroToggleGroupBean",
                    "type": "object",
                    "title": "ToggleGroup",
                    "description": "\n\nDefines a ToggleGroup which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    [\n      {\n        \"type\": \"togglegroup\",\n        \"macroParameter\": \"toggleGroupMacroParameter\",\n        \"controls\": [\n          {\n            \"type\": \"togglebutton\",\n            \"macroParameterValue\": \"macroParameterValue 0\",\n            \"label\": {\n              \"value\": \"My Custom Control 0\"\n            },\n            \"key\": \"my-custom-toggle-button-0\"\n          },\n          {\n            \"type\": \"togglebutton\",\n            \"macroParameterValue\": \"macroParameterValue 1\",\n            \"label\": {\n              \"value\": \"My Custom Control 1\"\n            },\n            \"key\": \"my-custom-toggle-button-1\"\n          }\n        ]\n      }\n    ]\n\n\n"
                  },
                  {
                    "properties": {
                      "label": {
                        "$ref": "#/definitions/i18nProperty",
                        "fieldDescription": "\n\nText which will appear inside the button\n\n"
                      },
                      "type": {
                        "enum": [
                          "button",
                          "BUTTON"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'button'\n\n"
                      },
                      "key": {
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                      }
                    },
                    "required": [
                      "label",
                      "type",
                      "key"
                    ],
                    "additionalProperties": true,
                    "shortClassName": "buttonControlBean",
                    "type": "object",
                    "title": "ButtonControl",
                    "description": "\n\nDefines a button which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                  },
                  {
                    "properties": {
                      "macroParameter": {
                        "type": "string",
                        "fieldDescription": "\n\nThe Macro Parameter identifier used to store the text\n\n"
                      },
                      "type": {
                        "enum": [
                          "text",
                          "TEXT"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'text'\n\n"
                      },
                      "key": {
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
                      }
                    },
                    "required": [
                      "macroParameter",
                      "type",
                      "key"
                    ],
                    "shortClassName": "textControlBean",
                    "type": "object",
                    "title": "TextControl",
                    "description": "\n\nDefines a text field which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                  }
                ]
              },
              "type": "array",
              "fieldDescription": "\n\nList of controls which will be added to the macro property panel\n\n"
            },
            "url": {
              "format": "uri-template",
              "type": "string",
              "fieldDescription": "\n\nThe URL of the add-on endpoint which will be served as a hidden iframe inside the property panel\n\n"
            }
          },
          "required": [
            "url"
          ],
          "shortClassName": "macroPropertyPanelBean",
          "type": "object",
          "title": "Macro Property Panel",
          "description": "\n\nDefining a Macro Property panel allows you to add a hidden iframe to your macro's\n property panel. The iframe is loaded as soon as the property panel is opened.\n\n In order to persist custom data using your property panel, use the Javascript\n <a href=\"../../jsapi/confluence/\">Confluence API</a>.\n For example:\n\n    AP.require([\"confluence\"], function (confluence) {\n        var macroParams = {\n            myParameter: value\n        };\n        confluence.saveMacro(macroParams);\n    });\n\n In order to retrieve the custom data again when the property panel is opened, use `confluence.getMacroData` (see\n <a href=\"../../jsapi/confluence/\">Confluence API</a>):\n\n    AP.require(\"confluence\", function (confluence) {\n        var macroData = confluence.getMacroData(function(macroParams) {\n            doSomethingWith(macroParams.myParameter);\n        });\n    });\n\n Dialogs may also be created. Use `dialog.create` (see\n <a href=\"../../jsapi/dialog/\">Dialog API</a>):\n\n    AP.require('dialog', function(dialog) {\n        dialog.create({\n            key: 'my-module-key',\n            width: '500px',\n            height: '200px',\n            chrome: true\n        }).on(\"close\", callbackFunc);\n    });\n\n",
          "fieldDescription": "\n\nThe configuration of a property panel. Specify a hidden iframe to be loaded in the macro's property panel.\n\n"
        },
        "autoconvert": {
          "$ref": "#/definitions/autoconvert",
          "fieldDescription": "\n\nURL patterns associated with this macro. If a URL matching a defined pattern is pasted into the editor, this macro\n  will be created and will replace the URL string.\n\n"
        },
        "imagePlaceholder": {
          "$ref": "#/definitions/imagePlaceholder",
          "fieldDescription": "\n\nThe image rendered in the editor as the macro placeholder. It can only be used with bodyless macros and will behave\n just like a regular macro placeholder. Any parameter changes in the macro browser will cause the image\n to be reloaded - so that changes can be seen.\n\n"
        },
        "renderingMethod": {
          "enum": [
            "get",
            "GET",
            "post",
            "POST"
          ],
          "type": "string",
          "fieldDescription": "\n\nHTTP method that will be used in the HTTP request.\n\n For example: <br>\n If the rendering method was set to POST like this:\n <pre><code>\n {\n     \"renderingMethod\": \"POST\",\n     \"url\": \"/macro-renderer?body={macro.body}\"\n }\n </code></pre>\n\n Then Confluence will send a POST request to <code>/macro-renderer</code> like:<br>\n <pre><code>\n   POST /macro-renderer HTTP/1.1\n   Authorization: JWT &lt;JWT token&gt;\n   Content-Type: application/x-www-form-urlencoded\n   Transfer-Encoding: chunked\n   Host: &lt;host&gt;\n   User-Agent: Atlassian HttpClient &lt;atlassian http client version&gt; / Confluence-&lt;confluence version&gt; / Atlassian-Connect/&lt;connect version&gt;\n\n   body=&lt;macro body&gt;&amp;&lt;some value&gt;&amp;pageVersion=&lt;some value&gt;&amp;tz=&lt;some value&gt;&amp;lic=&lt;some value&gt;&amp;user_key=&lt;some value&gt;&amp;xd&amp;_e=&lt;some value&gt;&amp;cp=&lt;some value&gt;&amp;xdm_c=&lt;some value&gt;&amp;cv=&lt;some value&gt;&amp;user_id=&lt;some value&gt;\n </code></pre>\n\n <strong>Note:</strong> All the parameters will be sent via POST payload in\n <code>application/x-www-form-urlencoded</code> instead of URL query parameters.<br>\n The latest version of <code>Atlassian Connect Express</code> and <code>Atlassian Connect Spring Boot</code>\n have built-in support for verifying requests sent by POST. However you might need to implement the query hash\n verification if the framework you are using doesn't support it.\n\n",
          "defaultValue": "get"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nThe categories the macro should appear in. A macro with no category will show up in the default 'All' category.\n\n Currently, the following categories are supported by Confluence:\n\n * `admin`: Administration\n * `communication`: Communication\n * `confluence-content`: Confluence Content\n * `development`: Development\n * `external-content`: External Content\n * `formatting`: Formatting\n * `media`: Media\n * `navigation`: Navigation\n * `reporting`: Reporting\n * `visuals`: Visuals &amp; Images\n\n"
        },
        "parameters": {
          "items": {
            "properties": {
              "identifier": {
                "pattern": "[-_a-z0-9\\.]+",
                "type": "string",
                "fieldDescription": "\n\nA unique identifier for the parameter.\n It must only contain lowercase alphanumeric characters, dashes, underscores, dots and must not contain any spaces.\n This identifier will be used in the query parameters of the add-on URL.\n\n"
              },
              "aliases": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "fieldDescription": "\n\nAliases for the macro parameter.\n\n"
              },
              "hidden": {
                "type": "boolean",
                "fieldDescription": "\n\nDetermines if the parameter will be displayed in the macro editor.\n\n",
                "defaultValue": "false"
              },
              "defaultValue": {
                "type": "string",
                "fieldDescription": "\n\nThe default value for the parameter.\n\n"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "fieldDescription": "\n\nDescribes the ``enum`` values - only applicable for enum typed parameters.\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe human readable name of the parameter which will be displayed in the UI.\n\n"
              },
              "multiple": {
                "type": "boolean",
                "fieldDescription": "\n\nWhether it takes multiple values.\n\n",
                "defaultValue": "false"
              },
              "description": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe description of the parameter\n\n"
              },
              "type": {
                "type": "string",
                "fieldDescription": "\n\nThe type of parameter.\n\n Currently the following parameter types are supported in the macro browser's UI:\n\n * `attachment`: displays an autocomplete field for search on attachment filenames.\n * `boolean`: displays a check box.\n * `confluence-content`: displays an autocomplete field for search on page and blog titles.\n * `enum`: displays a select field.\n * `spacekey`: displays an autocomplete field for search on space names.\n * `string`: displays an input field (this is the default if unknown type).\n * `username`: displays an autocomplete field for search on username and full name.\n\n"
              },
              "required": {
                "type": "boolean",
                "fieldDescription": "\n\nWhether it is a required parameter.\n\n",
                "defaultValue": "false"
              }
            },
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "shortClassName": "macroParameterBean",
            "type": "object",
            "title": "Macro Input Parameter",
            "description": "\n\nDescribes a parameter input field for a macro.\n\n Any declared parameters must also be included in the URL value of the macro in order to serialise this value, for\n example, for a macro with a parameter `view` it should be added to the macro url as follows:\n\n <pre><code>\n\"dynamicContentMacros\": [{\n   ...\n   \"url\": \"/render-map?pageTitle={page.title}&amp;viewChoice={view}\",\n   ...\n}]\n </code></pre>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"parameters\": [\n        {\n          \"identifier\": \"view\",\n          \"name\": {\n            \"value\": \"Map View\"\n          },\n          \"description\": {\n            \"value\": \"Allows switching between view types\"\n          },\n          \"type\": \"enum\",\n          \"required\": true,\n          \"multiple\": false,\n          \"defaultValue\": \"Map\",\n          \"values\": [\n            \"Map\",\n            \"Satellite\"\n          ],\n          \"hidden\": false\n        }\n      ]\n    }\n\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nThe list of parameter input fields that will be displayed.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify the macro. Keys must only contain alphanumeric characters and dashes, and must be globally unique. Prefixing it with the name of your add-on is the best way to ensure this.\n\n"
        }
      },
      "required": [
        "name",
        "url",
        "key"
      ],
      "additionalProperties": true,
      "shortClassName": "staticContentMacroModuleBean",
      "type": "object",
      "title": "Static Content Macro",
      "description": "\n\nA Confluence macro that returns XHTML in the Confluence storage format. Note, unlike most\n Connect modules, this content is not displayed in an iframe. Instead, your macro is responsible for returning valid\n Storage Format XML to the confluence page, which Confluence will render for you at view time.\n\n Please consult <a href=\"https://confluence.atlassian.com/display/DOC/Confluence+Storage+Format\">Confluence Storage Format</a>\n for additional information about how to construct valid storage format XML.\n\n <h2>Use Caching</h2>\n\n Because any calls to the macro rendering service happen synchronously during page load, we strongly encourage the\n implementations to take advantage of HTTP's caching mechanisms: Often, the rendered content only depends on the macro's\n body and parameters. A good approach for this specific case is to prevent Connect from retrieving the content again, unless\n the parameters or body have actually changed:\n\n <pre><code>\n res.setHeader('Cache-Control', ['max-age=3600', 's-maxage=3600']);\n </code></pre>\n\n This response header tells the cache to use the response for an hour without asking the service again.\n Because we declare the macro hash and parameters as URL variables, the URL will automatically change when the macro is changed.\n This change will cause Connect to bypass the cache and to fetch the content from the add-on again.\n So doing non-conditional caching works very well for this case. If the content of the macro varies with other data,\n you could use <code>ETag</code> and <code>If-None-Match</code> to render the macro conditionally.\n\n Also keep in mind that the calls are made from the Confluence server to the add-on host. If you need to prevent any caching on the server, use\n\n <pre><code>\n Cache-Control: no-cache\n </code></pre>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"staticContentMacros\": [\n          {\n            \"renderingMethod\": \"get\",\n            \"url\": \"/render-map?pageTitle={page.title}\",\n            \"description\": {\n              \"value\": \"Shows a configurable map\"\n            },\n            \"icon\": {\n              \"width\": 80,\n              \"height\": 80,\n              \"url\": \"/maps/icon.png\"\n            },\n            \"documentation\": {\n              \"url\": \"http://docs.example.com/addons/maps\"\n            },\n            \"categories\": [\n              \"visuals\"\n            ],\n            \"outputType\": \"block\",\n            \"bodyType\": \"none\",\n            \"aliases\": [\n              \"map\"\n            ],\n            \"featured\": true,\n            \"parameters\": [\n              {\n                \"identifier\": \"view\",\n                \"name\": {\n                  \"value\": \"Map View\"\n                },\n                \"description\": {\n                  \"value\": \"Allows switching between view types\"\n                },\n                \"type\": \"enum\",\n                \"required\": true,\n                \"multiple\": false,\n                \"defaultValue\": \"Map\",\n                \"values\": [\n                  \"Map\",\n                  \"Satellite\"\n                ],\n                \"hidden\": false\n              }\n            ],\n            \"autoconvert\": {\n              \"urlParameter\": \"url\",\n              \"matchers\": [\n                {\n                  \"pattern\": \"https://www.example.com/maps/{}/{}\"\n                },\n                {\n                  \"pattern\": \"https://www.example.com/map-editor/{}\"\n                }\n              ]\n            },\n            \"editor\": {\n              \"url\": \"/map-editor\",\n              \"editTitle\": {\n                \"value\": \"Edit Map\"\n              },\n              \"insertTitle\": {\n                \"value\": \"Insert Map\"\n              }\n            },\n            \"name\": {\n              \"value\": \"Maps\"\n            },\n            \"key\": \"static-macro-example\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "hoverOrFocus": {
      "properties": {
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the background of the component when it is hovered or focused.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the text in the component when it is hovered or focused.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "backgroundColor"
      ],
      "shortClassName": "hoverOrFocusBean",
      "type": "object",
      "description": "\n\n"
    },
    "layer": {
      "properties": {
        "backgroundClip": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background clip property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\">background-clip</a> MDN reference for details.\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied to the content background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "backgroundAttachment": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background attachment property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\">background-attachment</a> MDN reference for details.\n\n"
        },
        "background": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background shorthand property to set all the background properties in one declaration.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/background\">background</a> MDN reference for details.\n\n"
        },
        "backgroundImage": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background image property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\">background-image</a> MDN reference for details.\n\n"
        },
        "width": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the width property to be applied on the layer of underlay of content view.<br>\n The format of inputs should be in CSS style where the input has only one element\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        },
        "backgroundSize": {
          "pattern": "auto|cover|contain|initial|inherit|^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))( 0| (\\d*)(em|ex|in|cm|mm|pt|pc|px|%)){0,3}$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background repeat property to be applied for the content view.<br>\n Values must contain \"auto\", \"cover\", \"contain\", \"initial\", \"inherit\", length or percentage.<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> MDN reference for details.\n\n"
        },
        "backgroundPosition": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background position property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\">background-position</a> MDN reference for details.\n\n"
        },
        "backgroundBlendMode": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background blend mode property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode\">background-blend-more</a> MDN reference for details.\n\n"
        },
        "backgroundRepeat": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background size property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\">background-repeat</a> MDN reference for details.\n\n"
        },
        "backgroundOrigin": {
          "pattern": "^((?![;|}]).)*$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the CSS background origin property to be applied for the content view.<br>\n Values must not contain semi-colon \";\" and curly bracket \"}\".<br>\n See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin\">background-origin</a> MDN reference for details.\n\n"
        },
        "height": {
          "pattern": "^(0|(\\d*)(em|ex|in|cm|mm|pt|pc|px|%))$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the height property to be applied on the layer of underlay of content view.<br>\n The format of inputs should be in CSS style where the input has only one element\n followed by length units (em, ex, in, cm, mm, pt, pc, px) or percentage (%).<br>\n\n"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "shortClassName": "layerScreenBean",
      "type": "object",
      "title": "Layer",
      "description": "\n\n<p>\n  Defines styles to be applied on the layer of the underlay of content view.\n </p>\n <p>\n  The supported properties include shorthand <i>background</i> and all CSS background properties.\n  The keys are the camelCased versions of corresponding CSS properties, like <i>backgroundImage</i>,\n  <i>backgroundColor</i>, <i>backgroundSize</i>, <i>backgroundPosition</i>, <i>backgroundRepeat</i>,\n  <i>backgroundClip</i>, <i>backgroundOrigin</i>, <i>backgroundAttachment</i>, and <i>backgroundBlendMode</i>.\n </p>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"width\": \"100%\",\n      \"height\": \"250px\",\n      \"backgroundImage\": \"url('http://path/to/img/skyline.jpg')\",\n      \"backgroundSize\": \"cover\",\n      \"backgroundRepeat\": \"no-repeat\"\n    }\n\n\n"
    },
    "content": {
      "properties": {
        "container": {
          "$ref": "#/definitions/container",
          "fieldDescription": "\n\nDeclares styles to be applied on the container of content view\n\n"
        },
        "screen": {
          "$ref": "#/definitions/screen",
          "fieldDescription": "\n\nDeclares styles to be applied on the underlay of content view\n\n"
        },
        "header": {
          "$ref": "#/definitions/contentHeader",
          "fieldDescription": "\n\nDeclares styles to be applied on the header of content view\n\n"
        },
        "body": {
          "$ref": "#/definitions/body",
          "fieldDescription": "\n\nDeclares styles to be applied on the body of content view\n\n"
        }
      },
      "required": [
        "container",
        "screen",
        "header",
        "body"
      ],
      "shortClassName": "contentBean",
      "type": "object",
      "title": "Content",
      "description": "\n\nDefines styles to be applied on the content view.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"screen\": {\n        \"layer\": {\n          \"width\": \"100%\",\n          \"height\": \"250px\",\n          \"backgroundImage\": \"url('http://path/to/img/skyline.jpg')\",\n          \"backgroundSize\": \"cover\",\n          \"backgroundRepeat\": \"no-repeat\"\n        },\n        \"gutterTop\": \"20px\",\n        \"gutterRight\": \"small\",\n        \"gutterBottom\": \"10px\",\n        \"gutterLeft\": \"small\",\n        \"background\": \"linear-gradient(45deg, rgba(176,104,112,1) 0%, rgba(244,212,216,1) 100%)\"\n      },\n      \"container\": {\n        \"padding\": \"0 20px\",\n        \"borderRadius\": \"10px\",\n        \"background\": \"#F4D4D8\"\n      },\n      \"header\": {\n        \"padding\": \"20px 0 90px 20px\",\n        \"borderRadius\": \"5px 5px 0 0\",\n        \"backgroundColor\": \"rgba(0, 0, 0, 0.2)\"\n      },\n      \"body\": {\n        \"padding\": \"10px\",\n        \"borderRadius\": \"0 0 5px 5px\",\n        \"background\": \"#FFFFFF\"\n      }\n    }\n\n\n"
    },
    "button": {
      "properties": {
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the color to be applied to the button background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the color to be applied to the button text.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "backgroundColor",
        "color"
      ],
      "shortClassName": "buttonBean",
      "type": "object",
      "title": "Button",
      "description": "\n\nDefines styles to be applied on the button.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"backgroundColor\": \"#894E59\",\n      \"color\": \"#FFFFFF\"\n    }\n\n\n"
    },
    "primaryNavigation": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the color to be applied to the button background on the navigation.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "hoverOrFocus": {
          "$ref": "#/definitions/hoverOrFocus",
          "fieldDescription": "\n\nDeclares the style to be applied to the navigation when it is hovered or focused.\n\n"
        }
      },
      "required": [
        "color",
        "hoverOrFocus"
      ],
      "shortClassName": "primaryNavigationBean",
      "type": "object",
      "title": "PrimaryNavigation",
      "description": "\n\nDefines styles to be applied on the primary navigation.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"hoverOrFocus\": {\n        \"backgroundColor\": \"#863647\",\n        \"color\": \"#FFFFFF\"\n      },\n      \"color\": \"#FFFFFF\"\n    }\n\n\n"
    },
    "search": {
      "properties": {
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the background of the search field.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the text in the search field.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "backgroundColor",
        "color"
      ],
      "shortClassName": "searchFieldBean",
      "type": "object",
      "title": "Search",
      "description": "\n\nDefines styles to be applied on the search field.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"backgroundColor\": \"#9A636B\",\n      \"color\": \"#FFFFFF\"\n    }\n\n\n"
    },
    "lookAndFeel": {
      "properties": {
        "bordersAndDividers": {
          "$ref": "#/definitions/bordersAndDividers",
          "fieldDescription": "\n\nDeclares styles to be applied on borders and dividers\n\n"
        },
        "headings": {
          "$ref": "#/definitions/headings",
          "fieldDescription": "\n\nDeclares styles to be applied on the headings of the content (HTML h1 to h6 tags)\n\n"
        },
        "header": {
          "$ref": "#/definitions/header",
          "fieldDescription": "\n\nDeclares styles to be applied on the header bar\n\n"
        },
        "links": {
          "$ref": "#/definitions/links",
          "fieldDescription": "\n\nDeclares styles to be applied on the links in the content (HTML a tags)\n\n"
        },
        "menus": {
          "$ref": "#/definitions/menus",
          "fieldDescription": "\n\nDeclares styles to be applied on menus, e.g. Space Tools menu, Action menu (expanding at the ellipsis)\n\n"
        },
        "content": {
          "$ref": "#/definitions/content",
          "fieldDescription": "\n\nDeclares styles to be applied on the content, including Page Content, Blogpost Content, Page Collector, Blogpost Collector\n\n"
        }
      },
      "required": [
        "bordersAndDividers",
        "headings",
        "header",
        "links",
        "menus",
        "content"
      ],
      "shortClassName": "lookAndFeelBean",
      "type": "object",
      "title": "LookAndFeel",
      "description": "\n\nDefines custom look and feel experience.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"headings\": {\n        \"color\": \"#333333\"\n      },\n      \"links\": {\n        \"color\": \"#3572B0\"\n      },\n      \"menus\": {\n        \"hoverOrFocus\": {\n          \"backgroundColor\": \"#3873AE\"\n        },\n        \"color\": \"#000000\"\n      },\n      \"bordersAndDividers\": {\n        \"color\": \"#0D0E0E\"\n      },\n      \"header\": {\n        \"backgroundColor\": \"#661F2D\",\n        \"button\": {\n          \"backgroundColor\": \"#894E59\",\n          \"color\": \"#FFFFFF\"\n        },\n        \"primaryNavigation\": {\n          \"hoverOrFocus\": {\n            \"backgroundColor\": \"#863647\",\n            \"color\": \"#FFFFFF\"\n          },\n          \"color\": \"#FFFFFF\"\n        },\n        \"secondaryNavigation\": {\n          \"hoverOrFocus\": {\n            \"backgroundColor\": \"#863647\",\n            \"color\": \"#FFFFFF\"\n          },\n          \"color\": \"#000000\"\n        },\n        \"search\": {\n          \"backgroundColor\": \"#9A636B\",\n          \"color\": \"#FFFFFF\"\n        }\n      },\n      \"content\": {\n        \"screen\": {\n          \"layer\": {\n            \"width\": \"100%\",\n            \"height\": \"250px\",\n            \"backgroundImage\": \"url('http://path/to/img/skyline.jpg')\",\n            \"backgroundSize\": \"cover\",\n            \"backgroundRepeat\": \"no-repeat\"\n          },\n          \"gutterTop\": \"20px\",\n          \"gutterRight\": \"small\",\n          \"gutterBottom\": \"10px\",\n          \"gutterLeft\": \"small\",\n          \"background\": \"linear-gradient(45deg, rgba(176,104,112,1) 0%, rgba(244,212,216,1) 100%)\"\n        },\n        \"container\": {\n          \"padding\": \"0 20px\",\n          \"borderRadius\": \"10px\",\n          \"background\": \"#F4D4D8\"\n        },\n        \"header\": {\n          \"padding\": \"20px 0 90px 20px\",\n          \"borderRadius\": \"5px 5px 0 0\",\n          \"backgroundColor\": \"rgba(0, 0, 0, 0.2)\"\n        },\n        \"body\": {\n          \"padding\": \"10px\",\n          \"borderRadius\": \"0 0 5px 5px\",\n          \"background\": \"#FFFFFF\"\n        }\n      }\n    }\n\n\n"
    },
    "bordersAndDividers": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares the color to be applied to the borders and dividers.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "color"
      ],
      "shortClassName": "bordersAndDividersBean",
      "type": "object",
      "title": "BordersAndDividers",
      "description": "\n\nDefines styles to be applied on the borders and dividers.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"color\": \"#0D0E0E\"\n    }\n\n\n"
    },
    "uiSupport": {
      "properties": {
        "defaultOperator": {
          "type": "string",
          "fieldDescription": "\n\nThe CQL builder will use this operator when constructing the CQL string.\n\n"
        },
        "dataUri": {
          "type": "string",
          "fieldDescription": "\n\nIf provided, the CQL builder will provide a drop down and use this url to find the list of value values.  This\n URL should return a json array of objects describing the valid options.\n\n <pre><code>\n [\n   {\"id\": \"value1\", \"text\": \"First Option\"},\n   {\"id\": \"value2\", \"text\": \"Second Option\"}\n ]\n </code></pre>\n\n <strong>NOTE:</strong> since the call to this URL will be made from the user's browser, you need to enable\n <a href=\"http://www.w3.org/TR/cors/\">CORS</a> headers for responses to this resource.\n\n Setting a <code>Access-Control-Allow-Origin</code> header to the URL of the Atlassian Cloud instance where\n this add-on is installed is usually enough to satisfy the CORS requirements.  This can be done by tracking\n the client key and its url in your <code>/installed</code> callback, then looking up the url when the request\n is made.\n\n"
        },
        "valueType": {
          "enum": [
            "space",
            "SPACE",
            "label",
            "LABEL",
            "user",
            "USER",
            "contentid",
            "CONTENTID",
            "contenttype",
            "CONTENTTYPE",
            "date",
            "DATE",
            "string",
            "STRING",
            "number",
            "NUMBER"
          ],
          "type": "string",
          "fieldDescription": "\n\nAs well as providing a text field and allowing any entry, the UI support system provides a number of\n build in components that can enrich the user experience.  These provide extra user interface components\n to allow setting or picking their value in an intuitive way.\n\n The type can be one of the following values:\n\n <ul>\n <li><code>space</code> - provides a space picker and stores the result space key as the result.</li>\n <li><code>label</code> - provides a label picker and stores the list of labels as the result.</li>\n <li><code>user</code> - provides a user picker and stores the username as the result.</li>\n <li><code>contentId</code> - provides a content picker and stores the content id as the result.</li>\n <li><code>contentType</code> - provides a content type picker.</li>\n <li><code>date</code> - provides a date picker</li>\n <li><code>string</code> - provides a free form text field</li>\n <li><code>number</code> - provides a free form text field</li>\n </ul>\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe name of this field as used by the CQL builder UI components.\n\n"
        },
        "tooltip": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe tooltip of this field as used by the CQL builder UI components.\n\n"
        }
      },
      "required": [
        "valueType",
        "name"
      ],
      "shortClassName": "uISupportBean",
      "type": "object",
      "title": "User Interface Support",
      "description": "\n\nThe UI Support element allows you to define how your content property field will be presented in\n the CQL Builder.\n\n When you define UI support for a field, then the CQL builder will include it in all CQL features\n in Confluence, including other CQL based macros.\n\n See the <a href=\"../content-property-index-key-configuration/\">content property key</a>\n documentation for a complete content property example.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"defaultOperator\": \"~\",\n      \"name\": {\n        \"value\": \"Content Type\",\n        \"i18n\": \"attachment.type.name\"\n      },\n      \"tooltip\": {\n        \"value\": \"Content Type Tooltip\",\n        \"i18n\": \"attachment.type.tooltip\"\n      },\n      \"dataUri\": \"/data/content-types\",\n      \"valueType\": \"string\"\n    }\n\n\n"
    },
    "links": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the links.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "color"
      ],
      "shortClassName": "linksBean",
      "type": "object",
      "title": "Links",
      "description": "\n\nDefines styles to be applied on the links.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"color\": \"#3572B0\"\n    }\n\n\n"
    },
    "menus": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the text in the menus.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "hoverOrFocus": {
          "$ref": "#/definitions/hoverOrFocus",
          "fieldDescription": "\n\nDeclares style to be applied on the menu when it is hovered or focused.\n\n"
        }
      },
      "required": [
        "color",
        "hoverOrFocus"
      ],
      "shortClassName": "menusBean",
      "type": "object",
      "title": "Menus",
      "description": "\n\nDefines styles to be applied on menus.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"hoverOrFocus\": {\n        \"backgroundColor\": \"#3873AE\"\n      },\n      \"color\": \"#000000\"\n    }\n\n\n"
    },
    "contentBylineItems": {
      "properties": {
        "context": {
          "enum": [
            "page",
            "PAGE",
            "addon",
            "ADDON",
            "product",
            "PRODUCT"
          ],
          "type": "string",
          "fieldDescription": "\n\nThe context for the URL parameter, if the URL is specified as a relative (not absolute) URL.\n\n This context can be either `addon`, which renders the URL relative to the add-on's base URL,\n `page` which targets a page module by specifying the page's module key as the url\n or `product`, which renders the URL relative to the product's base URL.\n\n",
          "defaultValue": "addon"
        },
        "tooltip": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nThe internationalised text to be used in the link's tooltip.\n\n"
        },
        "icon": {
          "$ref": "#/definitions/icon",
          "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n are 16 by 16 pixels.\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "conditions": {
          "items": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/definitions/compositeCondition"
              },
              {
                "$ref": "#/definitions/singleCondition"
              }
            ]
          },
          "type": "array",
          "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "fieldTitle": "Object",
          "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <b>Example</b>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
        },
        "contentPropertyKey": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\n<p>\n     An optional <a href=\"../../storing-data-without-a-database/#confluence-content-properties\">Content Property</a> key\n     that this Byline Item will be bound to.\n </p>\n\n <p>\n     The key must only contain alphanumeric characters and dashes.\n </p>\n\n <p>\n     When a key is supplied, the:\n </p>\n <ul>\n     <li><a href=\"#name\"><code>name</code></a></li>\n     <li><a href=\"#icon\"><code>icon</code></a> and</li>\n     <li><a href=\"#tooltip\"><code>tooltip</code></a></li>\n </ul>\n <p>\n     for this Byline item will be overwritten with the property's corresponding value (if present), and the rendered item\n     will be updated as the value changes in the browser.\n </p>\n <p>\n     This requires the stored Content Property to have the following format:<br>\n\n\n\n\n\n    {\n      \"name\": {\n        \"value\": \"Item Text\"\n      },\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      },\n      \"tooltip\": {\n        \"value\": \"Item Tooltip\"\n      }\n    }\n\n\n\n </p>\n <p>\n     Note that only fields present in the original bean will be respected when substituting values from a\n     Content Property later. This means that to show a Content-Property-based <code>tooltip</code>, this Content\n     Byline Item module must specify a <code>tooltip</code>. Likewise for a Content-Property-based\n     <code>icon</code>, this module must specify an <code>icon</code>.\n </p>\n\n"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nSpecifies the URL targeted by the web item. The URL can be absolute or relative to either the\n product URL or the add-on's base URL, depending on the _context_ attribute.\n\n <p>\n     This field is required if the <code>target</code> of the item is not a\n     <a href=\"../dialog/\"><code>Dialog Module</code></a>.\n </p>\n\n Your add-on can receive [additional context](../../context-parameters/) from the application by\n using variable tokens in the URL attribute.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
        },
        "target": {
          "properties": {
            "options": {
              "type": "object",
              "fieldDescription": "\n\n<p>An object containing options which vary based on the type of web item target you are implementing.</p>\n\n <p>Currently-allowed options are:</p>\n <ul>\n     <li><a href=\"../inline-dialog-options/\">Inline Dialog Options</a> when type is \"inlinedialog\", and</li>\n     <li><a href=\"../dialog-options/\">Dialog Options</a> when type is \"dialog\"</li>\n     <li><a href=\"../dialog-module-options/\">Dialog Module Options</a> when type is \"dialogmodule\"</li>\n </ul>\n\n",
              "anyOf": [
                {
                  "properties": {
                    "offsetX": {
                      "type": "string",
                      "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the x-axis in pixels\n\n"
                    },
                    "offsetY": {
                      "type": "string",
                      "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the y-axis in pixels\n\n"
                    },
                    "width": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                    },
                    "onTop": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if the dialog should be shown above the trigger or not. If this option is true but there is insufficient room above the trigger the inline-dialog will be flipped to display below it\n\n"
                    },
                    "showDelay": {
                      "type": "integer",
                      "fieldDescription": "\n\nDetermines how long in milliseconds after a show trigger is fired (such as a trigger click) until the dialog is shown\n\n"
                    },
                    "closeOthers": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if all other dialogs on the screen are closed when this one is opened\n\n"
                    },
                    "persistent": {
                      "type": "boolean",
                      "fieldDescription": "\n\nThis option, ignores the 'closeOthers' option\n\n"
                    },
                    "onHover": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines whether the inline-Dialog will show on a mouseOver or mouseClick of the trigger\n\n"
                    },
                    "isRelativeToMouse": {
                      "type": "boolean",
                      "fieldDescription": "\n\nDetermines if the dialog should be shown relative to where the mouse is at the time of the event trigger (normally a click) if set to false the dialog will show aligned to the left of the trigger with the arrow showing at the center\n\n"
                    }
                  },
                  "shortClassName": "inlineDialogOptions",
                  "type": "object",
                  "title": "Inline Dialog Options",
                  "description": "\n\nOptions for an inline dialog target\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n"
                },
                {
                  "properties": {
                    "size": {
                      "enum": [
                        "small",
                        "SMALL",
                        "medium",
                        "MEDIUM",
                        "large",
                        "LARGE",
                        "x-large",
                        "X-LARGE",
                        "fullscreen",
                        "FULLSCREEN",
                        "maximum",
                        "MAXIMUM"
                      ],
                      "type": "string",
                      "fieldDescription": "\n\nSets the size of the dialog.\n\n <p>\n     This option is used instead of the 'height' and 'width' options.\n </p>\n\n"
                    },
                    "chrome": {
                      "type": "boolean",
                      "fieldDescription": "\n\nWhether the dialog should contain the AUI header and buttons.\n\n",
                      "defaultValue": "true"
                    },
                    "width": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                    },
                    "header": {
                      "$ref": "#/definitions/i18nProperty",
                      "fieldDescription": "\n\nThe header text for the dialog, if chrome is enabled.\n\n"
                    },
                    "height": {
                      "type": "string",
                      "fieldDescription": "\n\nSets how high the dialog is in pixels\n\n"
                    }
                  },
                  "shortClassName": "dialogOptions",
                  "type": "object",
                  "title": "Dialog Options",
                  "description": "\n\nOptions for a modal dialog <a href=\"../web-item-target/\">web item target</a> or <a href=\"../dialog/\">common module</a>.\n\n <p>\n     These options are a subset of those available via the <a href=\"../../jsapi/dialog/\">JavaScript API</a>.\n </p>\n\n <h2>Web Item Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n"
                },
                {
                  "properties": {
                    "key": {
                      "type": "string",
                      "fieldDescription": "\n\n<p>The key of a <a href=\"../dialog/\">Dialog</a> module declared in this Connect add-on.</p>\n\n <p>\n The dialog module will include the <a href=\"../dialog-options/\">Dialog Options</a>\n that would otherwise need to be specified directly in this options object.\n </p>\n\n"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "shortClassName": "dialogModuleOptions",
                  "type": "object",
                  "title": "Dialog Module Options",
                  "description": "\n\nOptions for a web-item targeting a common <a href=\"../dialog/\">dialog module</a>.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n"
                }
              ]
            },
            "type": {
              "enum": [
                "page",
                "PAGE",
                "dialog",
                "DIALOG",
                "inlinedialog",
                "INLINEDIALOG",
                "dialogmodule",
                "DIALOGMODULE"
              ],
              "type": "string",
              "fieldDescription": "\n\nDefines how the web-item content should be loaded by the page. By default, the web-item is loaded in the same\n page. The target can be set to open the web-item url as a modal dialog or an inline dialog.\n\n",
              "defaultValue": "page"
            }
          },
          "shortClassName": "webItemTargetBean",
          "type": "object",
          "title": "Web Item Target",
          "description": "\n\nDefines the way a <a href=\"../web-item/\">web item</a> link is opened in the browser, such as in a modal or inline dialog.\n\n <h2>Inline Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Common Dialog Module Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n\n\n <p>More details for this use-case can be found on the <a href=\"../dialog/\">Dialog Module</a> page.</p>\n\n",
          "fieldDescription": "\n\nDefines the behaviour when the item is triggered.\n If omitted, the url behaves as a regular hyperlink.\n\n"
        }
      },
      "required": [
        "name",
        "key"
      ],
      "shortClassName": "contentBylineItemModuleBean",
      "type": "object",
      "title": "Content Byline Item",
      "description": "\n\nContent Byline Item modules allow your Connect add-on to add dynamic content to the Confluence Content Byline\n - the part of the content under the title that includes metadata about the latest version of the content.\n\n\n\n\n\n    {\n      \"modules\": {\n        \"contentBylineItems\": [\n          {\n            \"url\": \"/my-byline-item\",\n            \"context\": \"addon\",\n            \"target\": {\n              \"type\": \"inlinedialog\"\n            },\n            \"tooltip\": {\n              \"value\": \"Item Tooltip\"\n            },\n            \"icon\": {\n              \"width\": 16,\n              \"height\": 16,\n              \"url\": \"/my-icon.png\"\n            },\n            \"name\": {\n              \"value\": \"Item Text\"\n            },\n            \"key\": \"byline-item\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "componentReference": {
      "properties": {
        "addonKey": {
          "type": "string",
          "fieldDescription": "\n\nThe add-on key that referenced module was defined in.<br>\n If not present, the module is assumed to be defined within the same add-on.\n\n"
        },
        "moduleKey": {
          "type": "string",
          "fieldDescription": "\n\nModule key of the referenced module.\n\n"
        }
      },
      "required": [
        "moduleKey"
      ],
      "shortClassName": "moduleReferenceBean",
      "type": "object",
      "title": "Module Reference",
      "description": "\n\nA reference to a module defined in either this or another add-on\n\n\n\n\n\n    {\n      \"addonKey\": \"addon-key\",\n      \"moduleKey\": \"general-page-module-key\"\n    }\n\n\n"
    },
    "dynamicContentMacro": {
      "properties": {
        "bodyType": {
          "enum": [
            "rich-text",
            "RICH-TEXT",
            "plain-text",
            "PLAIN-TEXT",
            "none",
            "NONE"
          ],
          "type": "string",
          "fieldDescription": "\n\nThe type of body content, if any, for this macro.\n\n",
          "defaultValue": "none"
        },
        "editor": {
          "properties": {
            "insertTitle": {
              "$ref": "#/definitions/i18nProperty",
              "fieldDescription": "\n\nAn optional title that will be shown in the edit dialog header for a new macro.\n\n"
            },
            "editTitle": {
              "$ref": "#/definitions/i18nProperty",
              "fieldDescription": "\n\nAn optional title that will be shown in the edit dialog header for an existing macro.\n\n"
            },
            "width": {
              "type": "string",
              "fieldDescription": "\n\nThe preferred width of the edit dialog, e.g. ``500px``.\n\n"
            },
            "url": {
              "format": "uri-template",
              "type": "string",
              "fieldDescription": "\n\nThe URL to the macro configuration page in the add-on.\n\n"
            },
            "height": {
              "type": "string",
              "fieldDescription": "\n\nThe preferred height of the edit dialog, e.g. ``300px``.\n\n"
            }
          },
          "required": [
            "url"
          ],
          "shortClassName": "macroEditorBean",
          "type": "object",
          "title": "Macro Editor",
          "description": "\n\nMacro Parameters go a long way when it comes to macro configuration, but there are cases\n when a macro add-on needs more control over the UI.\n\n Defining a Macro Editor allows you to implement a custom UI for the macro, by specifying a\n URL to a page in your add-on which will be shown in the dialog iFrame.\n\n In order to persist custom data in your macro editor, use the Javascript\n [Confluence API](../../jsapi/confluence/) and the [Dialog API](../../jsapi/dialog/).\n For example:\n\n\n    AP.require([\"confluence\", \"dialog\"], function (confluence, dialog) {\n        function onSubmit() {\n            var macroParams = {\n                myParameter: value\n            };\n            confluence.saveMacro(macroParams);\n            confluence.closeMacroEditor();\n            return true;\n        }\n\n        dialog.getButton(\"submit\").bind(onSubmit);\n    });\n\n In order to retrieve the custom data again when the editor is opened, use `confluence.getMacroData` (see\n [Confluence API](../../jsapi/confluence/)):\n\n    AP.require(\"confluence\", function (confluence) {\n        var macroData = confluence.getMacroData(function(macroParams) {\n            doSomethingWith(macroParams.myParameter);\n        });\n    });\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"editor\": {\n        \"url\": \"/generate_md\",\n        \"editTitle\": {\n          \"value\": \"Edit MarkDown\"\n        },\n        \"insertTitle\": {\n          \"value\": \"Insert New MarkDown\"\n        },\n        \"width\": \"400px\",\n        \"height\": \"300px\"\n      }\n    }\n\n\n",
          "fieldDescription": "\n\nThe configuration of a custom macro editor. This is useful if the parameter input field types are\n not sufficient to configure the macro.\n\n"
        },
        "featured": {
          "type": "boolean",
          "fieldDescription": "\n\nWhether the macro should be \"featured\", meaning having an additional link in the \"Insert More Content\" menu in the editor toolbar.\n\n",
          "defaultValue": "false"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nDefine aliases for the macro. The macro browser will open for the defined aliases as if it were this macro.\n\n"
        },
        "hidden": {
          "type": "boolean",
          "fieldDescription": "\n\nIf set to true, the macro will not appear in the macro browser.\n\n",
          "defaultValue": "false"
        },
        "renderModes": {
          "properties": {
            "default": {
              "$ref": "#/definitions/embeddedStaticContentMacroBean",
              "fieldDescription": "\n\nThis render mode will be used for any static render mode that is not mapped directly.  This is a catch\n all mode which allows you to set a default static fallback for all render modes.\n\n\n\n\n\n    {\n      \"default\": {\n        \"url\": \"/render-map-default\"\n      }\n    }\n\n\n"
            },
            "pdf": {
              "$ref": "#/definitions/embeddedStaticContentMacroBean",
              "fieldDescription": "\n\nThis render mode will be used when your macro is being rendered during \"export to pdf\".\n\n\n\n\n\n    {\n      \"pdf\": {\n        \"url\": \"/render-map-pdf\"\n      }\n    }\n\n\n"
            },
            "word": {
              "$ref": "#/definitions/embeddedStaticContentMacroBean",
              "fieldDescription": "\n\nThis render mode will be used when your macro is being rendered during \"export to word\".\n\n\n\n\n\n    {\n      \"word\": {\n        \"url\": \"/render-map-word\"\n      }\n    }\n\n\n"
            },
            "email": {
              "$ref": "#/definitions/embeddedStaticContentMacroBean",
              "fieldDescription": "\n\nThis render mode will be used when your macro is being rendered during email rendering, and requesting the EXPORT_VIEW representation.\n\n\n\n\n\n    {\n      \"email\": {\n        \"url\": \"/render-map-email\"\n      }\n    }\n\n\n"
            }
          },
          "shortClassName": "macroRenderModesBean",
          "type": "object",
          "title": "Macro Render Modes",
          "description": "\n\nAllows your dynamic content macro to provide different static macro implementations for different render modes.\n\n Dynamic Content Macros can include style sheets and javascript, allowing the development of rich interactive\n applications.  When your macro is rendered in a web browser this can provide a modern, interactive web experience.\n\n When your macro is rendered to static formats such as PDF, or word, these interactive modes are\n often undesirable, or technically impossible.\n\n Macro Render Modes allow you to map a render mode to a static content macro.  This allows you to\n provide an implementation of your macro for these formats, that will render safely to static formats.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dynamicContentMacros\": [\n          {\n            \"renderModes\": {\n              \"pdf\": {\n                \"url\": \"/render-map-pdf\"\n              },\n              \"default\": {\n                \"url\": \"/render-map-static\"\n              }\n            },\n            \"url\": \"/render-map?pageTitle={page.title}\",\n            \"categories\": [],\n            \"outputType\": \"block\",\n            \"bodyType\": \"none\",\n            \"aliases\": [],\n            \"name\": {\n              \"value\": \"Maps\"\n            },\n            \"key\": \"dynamic-macro-example\"\n          }\n        ]\n      }\n    }\n\n\n",
          "fieldDescription": "\n\nSince Dynamic Content Macros are rendered in an iframe, you are able to include your own style sheets and javascript.\n When your macro is exported to a static format such as PDF or Word, you can use the `renderModes` property to\n define a mapping between a certain type of output device and a static macro implementation.  This will allow you\n to create a static view of your macro's data where an interactive model is not appropriate.\n\n"
        },
        "documentation": {
          "$ref": "#/definitions/link",
          "fieldDescription": "\n\nA link to the documentation for the macro.\n\n"
        },
        "icon": {
          "$ref": "#/definitions/icon",
          "fieldDescription": "\n\nA link to the icon resource (80x80 pixels) that will be shown in the macro selection dialog.\n The URL can be absolute or relative to the add-on base URL.\n\n"
        },
        "description": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA description of the macro's functionality.\n\n"
        },
        "outputType": {
          "enum": [
            "block",
            "BLOCK",
            "inline",
            "INLINE"
          ],
          "type": "string",
          "fieldDescription": "\n\nHow this macro should be placed along side other page content.\n\n",
          "defaultValue": "block"
        },
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\nThe link to the add-on resource that provides the macro content.\n This URL has to be relative to the add-on base URL.\n\n Additional context parameters can be passed as variables in the URL:\n <pre><code>\n {\n   \"url\": \"/macro-renderer?body={macro.body}&amp;space_id={space.id}&amp;page_id={page.id}\"\n }\n </code></pre>\n\n Since macro bodies can be of arbitrary size and may contain sensitive data, care must be taken\n as to how its passed to your connect add-on.  You have three options to gain access to the body:\n\n - If you can predict the size of your body and it is consistently less than 128 characters, you\n can include it in the GET request using the `{macro.body}` parameter.\n - If you know your macro contains a body that will often exceed the 128 character threshold\n (or is known to contain sensitive data), then you can include the `{macro.id}` parameter and\n use the Confluence REST api to call back to collect the body.\n - If you want, you can include, `{macro.body}`, `{macro.id}`, and `{macro.truncated}`. This way\n your plugin can call back to confluence only if `{macro.truncated}` is '`true`'.  This will allow\n you to skip the callback if it's not needed.  This would be useful for macros that don't\n contain sensitive data of an unpredictable size.\n\n\n__Note:__ If you include the `{macro.body}` in your URL you are potentially leaking sensitive data\n to any intermediate host on the internet.  This may result in the body being cached or indexed\n by a third party.  If you are concerned about the security of your macro, you should always use\n the `{macro.id}` and use the Confluence REST API to collect the body.\n\n Here's an example:\n\n Declare the variables that are later required to fetch the macro content in the URL:\n <pre><code>\n {\n   \"url\": \"/render-macro?pageId={page.id}&amp;pageVersion={page.version}&amp;macroId={macro.id}\"\n }\n </code></pre>\n\n Then use the Confluence REST API to collect the body, for example directly from the iframe:\n <pre><code>\n AP.require(\"request\", function(request) {\n     var pageId = getUrlParameter(\"pageId\");\n     var pageVersion = getUrlParameter(\"pageVersion\");\n     var macroId = getUrlParameter(\"macroId\");\n     request({\n         url: \"/rest/api/content/\" + pageId +\n              \"/history/\" + pageVersion +\n              \"/macro/id/\" + macroId,\n         success: function(response) {\n             var macro = JSON.parse(response);\n             process(macro.body);\n         }\n     });\n });\n </code></pre>\n\n __Preview Mode:__ If you use the `{macro.id}` in your URL, the REST api will not return the macro body during\n a preview request, because the page has not been saved yet. You can use the `{output.type}` parameter to detect\n whether the macro is rendered in preview mode and adapt the response accordingly.\n\n __Note:__ `macro.body` will not be truncated when `renderingMethod` field was set to `POST` in static content macro.\n Refer to the [`Static Content Macros`](../static-content-macro/) for information on\n how to set this field.\n\n Currently supported variables for macros are:\n\n - `macro.hash`: The hash of the macro body (deprecated, use the macro.id)\n - `macro.id`: The id of the macro\n - `macro.body`: The macro body, truncated to 128 characters\n - `macro.truncated`: True if the macro body was truncated, false of not\n - `page.id`: The page ID, e.g. `1376295`\n - `page.title`: The page title, e.g. `My Page`\n - `page.type`: The page type, e.g. `page`\n - `page.version`: The page version, e.g. `6`\n - `space.id`: The space ID, e.g. `65537`\n - `space.key`: The space key, e.g. `AC`\n - `user.id`: The user ID, e.g. `admin`\n - `user.key`: The user key, e.g. `ff80808143087d180143087d3a910004`\n - `output.type`: The output type, e.g. `display` or `preview`\n\nContext parameters for macros are also required in the URL. Please see the\n [Macro Input Parameter](../macro-input-parameter/) documentation for details.\n\n"
        },
        "propertyPanel": {
          "properties": {
            "controls": {
              "items": {
                "type": "object",
                "anyOf": [
                  {
                    "properties": {
                      "controls": {
                        "items": {
                          "properties": {
                            "label": {
                              "$ref": "#/definitions/i18nProperty",
                              "fieldDescription": "\n\nText which will appear inside the button\n\n"
                            },
                            "type": {
                              "enum": [
                                "button",
                                "BUTTON"
                              ],
                              "type": "string",
                              "fieldDescription": "\n\nThe type field must be set to 'button'\n\n"
                            },
                            "key": {
                              "pattern": "^[a-zA-Z0-9-]+$",
                              "type": "string",
                              "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                            }
                          },
                          "required": [
                            "label",
                            "type",
                            "key"
                          ],
                          "additionalProperties": true,
                          "shortClassName": "buttonControlBean",
                          "type": "object",
                          "title": "ButtonControl",
                          "description": "\n\nDefines a button which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                        },
                        "type": "array",
                        "fieldDescription": "\n\nControls which will appear in the control group\n\n"
                      },
                      "type": {
                        "enum": [
                          "group",
                          "GROUP"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'group'\n\n"
                      }
                    },
                    "required": [
                      "controls",
                      "type"
                    ],
                    "shortClassName": "controlGroupBean",
                    "type": "object",
                    "title": "ControlGroup",
                    "description": "\n\nDefines a ControlGroup which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    [\n      {\n        \"type\": \"group\",\n        \"controls\": [\n          {\n            \"type\": \"button\",\n            \"label\": {\n              \"value\": \"My Custom Control 0\"\n            },\n            \"key\": \"my-custom-control-0\"\n          },\n          {\n            \"type\": \"button\",\n            \"label\": {\n              \"value\": \"My Custom Control 1\"\n            },\n            \"key\": \"my-custom-control-1\"\n          }\n        ]\n      }\n    ]\n\n\n"
                  },
                  {
                    "properties": {
                      "macroParameter": {
                        "type": "string",
                        "fieldDescription": "\n\nThe Macro Parameter identifier used to store the text\n\n"
                      },
                      "type": {
                        "enum": [
                          "text",
                          "TEXT"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'text'\n\n"
                      },
                      "key": {
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "fieldDescription": "\n\nA key to identify this module.\n\n This key must be unique relative to the add on, with the exception of Confluence macros: Their keys need to be\n globally unique.\n\n Keys must only contain alphanumeric characters and dashes.\n\n The key is used to generate the url to your add-on's module. The url is generated as a combination of your add-on\n key and module key. For example, an add-on which looks like:\n\n    {\n        \"key\": \"my-addon\",\n        \"modules\": {\n            \"configurePage\": {\n                \"key\": \"configure-me\",\n            }\n        }\n    }\n\n Will have a configuration page module with a URL of `/plugins/servlet/ac/my-addon/configure-me`.\n\n"
                      }
                    },
                    "required": [
                      "macroParameter",
                      "type",
                      "key"
                    ],
                    "shortClassName": "textControlBean",
                    "type": "object",
                    "title": "TextControl",
                    "description": "\n\nDefines a text field which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                  },
                  {
                    "properties": {
                      "controls": {
                        "items": {
                          "properties": {
                            "macroParameterValue": {
                              "type": "string",
                              "fieldDescription": "\n\nThe value that will be assigned to a macro parameter when this toggle is clicked\n\n"
                            },
                            "label": {
                              "$ref": "#/definitions/i18nProperty",
                              "fieldDescription": "\n\nText which will appear inside the button\n\n"
                            },
                            "type": {
                              "enum": [
                                "togglebutton",
                                "TOGGLEBUTTON"
                              ],
                              "type": "string",
                              "fieldDescription": "\n\nThe type field must be set to 'togglebutton'\n\n"
                            },
                            "key": {
                              "pattern": "^[a-zA-Z0-9-]+$",
                              "type": "string",
                              "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                            }
                          },
                          "required": [
                            "macroParameterValue",
                            "label",
                            "type",
                            "key"
                          ],
                          "additionalProperties": true,
                          "shortClassName": "macroToggleButtonControlBean",
                          "type": "object",
                          "title": "ToggleButtonControl",
                          "description": "\n\nDefines a toggle button which appears inside a ToggleGroup\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"togglebutton\",\n      \"macroParameterValue\": \"macroParameterValue 0\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-toggle-button-0\"\n    }\n\n\n"
                        },
                        "type": "array",
                        "fieldDescription": "\n\nToggle buttons which will appear in the toggle group\n\n"
                      },
                      "macroParameter": {
                        "pattern": "[-_a-z0-9\\.]+",
                        "type": "string",
                        "fieldDescription": "\n\nThe macro parameter identifier used to store the toggle state.\n It must only contain lowercase alphanumeric characters, dashes, underscores, dots and must not contain any spaces.\n\n"
                      },
                      "type": {
                        "enum": [
                          "togglegroup",
                          "TOGGLEGROUP"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'togglegroup'\n\n"
                      }
                    },
                    "required": [
                      "controls",
                      "macroParameter",
                      "type"
                    ],
                    "shortClassName": "macroToggleGroupBean",
                    "type": "object",
                    "title": "ToggleGroup",
                    "description": "\n\nDefines a ToggleGroup which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    [\n      {\n        \"type\": \"togglegroup\",\n        \"macroParameter\": \"toggleGroupMacroParameter\",\n        \"controls\": [\n          {\n            \"type\": \"togglebutton\",\n            \"macroParameterValue\": \"macroParameterValue 0\",\n            \"label\": {\n              \"value\": \"My Custom Control 0\"\n            },\n            \"key\": \"my-custom-toggle-button-0\"\n          },\n          {\n            \"type\": \"togglebutton\",\n            \"macroParameterValue\": \"macroParameterValue 1\",\n            \"label\": {\n              \"value\": \"My Custom Control 1\"\n            },\n            \"key\": \"my-custom-toggle-button-1\"\n          }\n        ]\n      }\n    ]\n\n\n"
                  },
                  {
                    "properties": {
                      "label": {
                        "$ref": "#/definitions/i18nProperty",
                        "fieldDescription": "\n\nText which will appear inside the button\n\n"
                      },
                      "type": {
                        "enum": [
                          "button",
                          "BUTTON"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type field must be set to 'button'\n\n"
                      },
                      "key": {
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "fieldDescription": "\n\nA key to identify the control. Keys must only contain alphanumeric characters and dashes, and must be unique\n\n"
                      }
                    },
                    "required": [
                      "label",
                      "type",
                      "key"
                    ],
                    "additionalProperties": true,
                    "shortClassName": "buttonControlBean",
                    "type": "object",
                    "title": "ButtonControl",
                    "description": "\n\nDefines a button which may appear in control extension points such as the property panel\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"type\": \"button\",\n      \"label\": {\n        \"value\": \"My Custom Control 0\"\n      },\n      \"key\": \"my-custom-control-0\"\n    }\n\n\n"
                  }
                ]
              },
              "type": "array",
              "fieldDescription": "\n\nList of controls which will be added to the macro property panel\n\n"
            },
            "url": {
              "format": "uri-template",
              "type": "string",
              "fieldDescription": "\n\nThe URL of the add-on endpoint which will be served as a hidden iframe inside the property panel\n\n"
            }
          },
          "required": [
            "url"
          ],
          "shortClassName": "macroPropertyPanelBean",
          "type": "object",
          "title": "Macro Property Panel",
          "description": "\n\nDefining a Macro Property panel allows you to add a hidden iframe to your macro's\n property panel. The iframe is loaded as soon as the property panel is opened.\n\n In order to persist custom data using your property panel, use the Javascript\n <a href=\"../../jsapi/confluence/\">Confluence API</a>.\n For example:\n\n    AP.require([\"confluence\"], function (confluence) {\n        var macroParams = {\n            myParameter: value\n        };\n        confluence.saveMacro(macroParams);\n    });\n\n In order to retrieve the custom data again when the property panel is opened, use `confluence.getMacroData` (see\n <a href=\"../../jsapi/confluence/\">Confluence API</a>):\n\n    AP.require(\"confluence\", function (confluence) {\n        var macroData = confluence.getMacroData(function(macroParams) {\n            doSomethingWith(macroParams.myParameter);\n        });\n    });\n\n Dialogs may also be created. Use `dialog.create` (see\n <a href=\"../../jsapi/dialog/\">Dialog API</a>):\n\n    AP.require('dialog', function(dialog) {\n        dialog.create({\n            key: 'my-module-key',\n            width: '500px',\n            height: '200px',\n            chrome: true\n        }).on(\"close\", callbackFunc);\n    });\n\n",
          "fieldDescription": "\n\nThe configuration of a property panel. Specify a hidden iframe to be loaded in the macro's property panel.\n\n"
        },
        "autoconvert": {
          "$ref": "#/definitions/autoconvert",
          "fieldDescription": "\n\nURL patterns associated with this macro. If a URL matching a defined pattern is pasted into the editor, this macro\n  will be created and will replace the URL string.\n\n"
        },
        "imagePlaceholder": {
          "$ref": "#/definitions/imagePlaceholder",
          "fieldDescription": "\n\nThe image rendered in the editor as the macro placeholder. It can only be used with bodyless macros and will behave\n just like a regular macro placeholder. Any parameter changes in the macro browser will cause the image\n to be reloaded - so that changes can be seen.\n\n"
        },
        "width": {
          "type": "string",
          "fieldDescription": "\n\nThe preferred width of the macro content.\n\n"
        },
        "name": {
          "$ref": "#/definitions/i18nProperty",
          "fieldDescription": "\n\nA human readable name.\n\n"
        },
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nThe categories the macro should appear in. A macro with no category will show up in the default 'All' category.\n\n Currently, the following categories are supported by Confluence:\n\n * `admin`: Administration\n * `communication`: Communication\n * `confluence-content`: Confluence Content\n * `development`: Development\n * `external-content`: External Content\n * `formatting`: Formatting\n * `media`: Media\n * `navigation`: Navigation\n * `reporting`: Reporting\n * `visuals`: Visuals &amp; Images\n\n"
        },
        "parameters": {
          "items": {
            "properties": {
              "identifier": {
                "pattern": "[-_a-z0-9\\.]+",
                "type": "string",
                "fieldDescription": "\n\nA unique identifier for the parameter.\n It must only contain lowercase alphanumeric characters, dashes, underscores, dots and must not contain any spaces.\n This identifier will be used in the query parameters of the add-on URL.\n\n"
              },
              "aliases": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "fieldDescription": "\n\nAliases for the macro parameter.\n\n"
              },
              "hidden": {
                "type": "boolean",
                "fieldDescription": "\n\nDetermines if the parameter will be displayed in the macro editor.\n\n",
                "defaultValue": "false"
              },
              "defaultValue": {
                "type": "string",
                "fieldDescription": "\n\nThe default value for the parameter.\n\n"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "fieldDescription": "\n\nDescribes the ``enum`` values - only applicable for enum typed parameters.\n\n"
              },
              "name": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe human readable name of the parameter which will be displayed in the UI.\n\n"
              },
              "multiple": {
                "type": "boolean",
                "fieldDescription": "\n\nWhether it takes multiple values.\n\n",
                "defaultValue": "false"
              },
              "description": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe description of the parameter\n\n"
              },
              "type": {
                "type": "string",
                "fieldDescription": "\n\nThe type of parameter.\n\n Currently the following parameter types are supported in the macro browser's UI:\n\n * `attachment`: displays an autocomplete field for search on attachment filenames.\n * `boolean`: displays a check box.\n * `confluence-content`: displays an autocomplete field for search on page and blog titles.\n * `enum`: displays a select field.\n * `spacekey`: displays an autocomplete field for search on space names.\n * `string`: displays an input field (this is the default if unknown type).\n * `username`: displays an autocomplete field for search on username and full name.\n\n"
              },
              "required": {
                "type": "boolean",
                "fieldDescription": "\n\nWhether it is a required parameter.\n\n",
                "defaultValue": "false"
              }
            },
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "shortClassName": "macroParameterBean",
            "type": "object",
            "title": "Macro Input Parameter",
            "description": "\n\nDescribes a parameter input field for a macro.\n\n Any declared parameters must also be included in the URL value of the macro in order to serialise this value, for\n example, for a macro with a parameter `view` it should be added to the macro url as follows:\n\n <pre><code>\n\"dynamicContentMacros\": [{\n   ...\n   \"url\": \"/render-map?pageTitle={page.title}&amp;viewChoice={view}\",\n   ...\n}]\n </code></pre>\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"parameters\": [\n        {\n          \"identifier\": \"view\",\n          \"name\": {\n            \"value\": \"Map View\"\n          },\n          \"description\": {\n            \"value\": \"Allows switching between view types\"\n          },\n          \"type\": \"enum\",\n          \"required\": true,\n          \"multiple\": false,\n          \"defaultValue\": \"Map\",\n          \"values\": [\n            \"Map\",\n            \"Satellite\"\n          ],\n          \"hidden\": false\n        }\n      ]\n    }\n\n\n"
          },
          "type": "array",
          "fieldDescription": "\n\nThe list of parameter input fields that will be displayed.\n\n"
        },
        "key": {
          "pattern": "^[a-zA-Z0-9-]+$",
          "type": "string",
          "fieldDescription": "\n\nA key to identify the macro. Keys must only contain alphanumeric characters and dashes, and must be globally unique. Prefixing it with the name of your add-on is the best way to ensure this.\n\n"
        },
        "height": {
          "type": "string",
          "fieldDescription": "\n\nThe preferred height of the macro content.\n\n"
        }
      },
      "required": [
        "name",
        "url",
        "key"
      ],
      "additionalProperties": true,
      "shortClassName": "dynamicContentMacroModuleBean",
      "type": "object",
      "title": "Dynamic Content Macro",
      "description": "\n\nA Confluence macro that loads remote content as an iframe. Dynamic Content Macros render content on every page\n request and are suitable for add-ons that need to display content that changes over time, that calls for dynamic\n interaction, or that is specific to the authenticated user.\n\n Since Dynamic Content Macros are rendered in an iframe, you are able to include your own style sheets and javascript.\n You can use these to create a rich, interactive experience for your users. When your macro is exported to a static\n format such as PDF or Word, you can use the `renderModes` property to define a mapping between a certain type of output\n device and a static macro implementation.  This will allow you to create a static view of your macro's data where an\n interactive model is not appropriate.\n\n For most modules, you do not need to be concerned with iframe sizing. It's all handled for you. However, an exception\n exists for inline macros.\n\n An inline macro is a type of macro that generates content within the text flow of a paragraph or other text element\n in which the macro appears, such as a status lozenge. To implement an inline macro, follow these general guidelines:\n\n <ol>\n  <li>In your `macro-page` declaration in the add-on descriptor, set the `output-type` attribute to `inline`. (Alternatively, if this value is set to `block`, the macro content will appear on a new line in the page output.)</li>\n  <li>If the output content should occupy a certain width and height, set those values as the width and height attributes for the element.</li>\n  <li>To prevent the macro output from being automatically resized, set the `data-options` attribute in the script tag for all.js to \"`resize:false`\". This turns off automatic resizing of the iframe.</li>\n  <li>If the size of the macro output content size is dynamic, call `AP.resize(w,h)` immediately after the DOM of your iframe is loaded.</li>\n </ol>\n\n <h2>Example</h2>\n The following macro example is an adaptation from the [Google Maps](https://marketplace.atlassian.com/plugins/atlassian-connect-gmaps)\n add-on. The source is hosted on [Bitbucket](https://bitbucket.org/atlassianlabs/ac-gmaps).\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dynamicContentMacros\": [\n          {\n            \"width\": \"200px\",\n            \"height\": \"200px\",\n            \"renderModes\": {\n              \"pdf\": {\n                \"url\": \"/render-map-pdf\"\n              },\n              \"default\": {\n                \"url\": \"/render-map-static\"\n              }\n            },\n            \"url\": \"/render-map?pageTitle={page.title}\",\n            \"description\": {\n              \"value\": \"Shows a configurable map\"\n            },\n            \"icon\": {\n              \"width\": 80,\n              \"height\": 80,\n              \"url\": \"/maps/icon.png\"\n            },\n            \"documentation\": {\n              \"url\": \"http://docs.example.com/addons/maps\"\n            },\n            \"categories\": [\n              \"visuals\"\n            ],\n            \"outputType\": \"block\",\n            \"bodyType\": \"none\",\n            \"aliases\": [\n              \"map\"\n            ],\n            \"featured\": true,\n            \"parameters\": [\n              {\n                \"identifier\": \"view\",\n                \"name\": {\n                  \"value\": \"Map View\"\n                },\n                \"description\": {\n                  \"value\": \"Allows switching between view types\"\n                },\n                \"type\": \"enum\",\n                \"required\": true,\n                \"multiple\": false,\n                \"defaultValue\": \"Map\",\n                \"values\": [\n                  \"Map\",\n                  \"Satellite\"\n                ],\n                \"hidden\": false\n              }\n            ],\n            \"autoconvert\": {\n              \"urlParameter\": \"url\",\n              \"matchers\": [\n                {\n                  \"pattern\": \"https://www.example.com/maps/{}/{}\"\n                },\n                {\n                  \"pattern\": \"https://www.example.com/map-editor/{}\"\n                }\n              ]\n            },\n            \"editor\": {\n              \"url\": \"/map-editor\",\n              \"editTitle\": {\n                \"value\": \"Edit Map\"\n              },\n              \"insertTitle\": {\n                \"value\": \"Insert Map\"\n              }\n            },\n            \"name\": {\n              \"value\": \"Maps\"\n            },\n            \"key\": \"dynamic-macro-example\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "apiSupport": {
      "properties": {
        "bodyType": {
          "enum": [
            "storage",
            "STORAGE",
            "raw",
            "RAW"
          ],
          "type": "string",
          "fieldDescription": "\n\nDefines the content body type of this custom content.\n Currently supported content body types are:\n <ul>\n     <li><code>storage</code>: This is Confluence's default storage representation which can be rendered using the <a href=\"https://developer.atlassian.com/cloud/confluence/rest/#api-contentbody-convert-to-post\">Content Body Conversion API</a></li>\n     <li><code>raw</code>: This representation is used for storing raw data in the body that is not storage format, this format is opaque to Confluence</li>\n </ul>\n\n",
          "defaultValue": "storage"
        },
        "supportedChildTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nDefines types that can be contained in this custom content.<br>\n Currently supported content types:\n <ul>\n     <li><code>attachment</code>: This custom content can contain attachment.</li>\n     <li><code>comment</code>: This custom content can contain comment.</li>\n     <li>\n         Any other content type key of defined custom content.<br>\n         Please refer to <a href=\"../custom-content/#content-type-key\">The content type key</a>\n         for how to construct the content type key.\n     </li>\n </ul>\n\n"
        },
        "supportedSpacePermissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nDefines the space permissions that this custom content supports.\n Allowable values are : <b><code>read, create and delete.</code></b>\n It is required that these permissions be granted through the\n space permissions UI in order to perform the given operation.\n\n Otherwise the default permissions will be used.\n\n"
        },
        "preventDuplicateTitle": {
          "type": "boolean",
          "fieldDescription": "\n\nDefines whether Confluence should prevent content with duplicate title from being created in the same space or container.\n\n",
          "defaultValue": "false"
        },
        "indexing": {
          "$ref": "#/definitions/indexing",
          "fieldDescription": "\n\nDefines how this content type will be indexed\n\n"
        },
        "supportedContainerTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "fieldDescription": "\n\nDefines types that this custom content can be contained in.<br>\n Currently supported content types:\n <ul>\n     <li><code>space</code>: Treat this custom content as a space directly contained content.</li>\n     <li><code>page</code>: This custom content can be contained in a page.</li>\n     <li><code>blogpost</code>: This custom content can be contained in a blog post.</li>\n     <li>\n         Any other content type of defined custom content.<br>\n         Please refer to <a href=\"../custom-content/#content-type-key\">The content type key</a>\n         for how to construct the content type key.\n     </li>\n </ul>\n\n"
        }
      },
      "required": [
        "supportedContainerTypes"
      ],
      "shortClassName": "customContentAPISupportBean",
      "type": "object",
      "title": "Custom Content API Support",
      "description": "\n\nThis property allows you to specify the container types your custom content can appear in, and its supported child content types.\n It also allows you to enable indexing of your custom content.\n\n\n\n\n\n    {\n      \"bodyType\": \"storage\",\n      \"supportedContainerTypes\": [\n        \"space\",\n        \"page\"\n      ],\n      \"supportedChildTypes\": [\n        \"attachment\",\n        \"comment\"\n      ],\n      \"supportedSpacePermissions\": [],\n      \"preventDuplicateTitle\": false,\n      \"indexing\": {\n        \"enabled\": true\n      }\n    }\n\n\n\n\n <p>In the above example, you'll see we specify content type keys in the <code>supportedContainerTypes</code> and <code>supportedChildTypes</code> fields.\n There are 2 categories of content type you can reference – built-in content and custom content.</p>\n\n <h3>Built-in content types example</h3>\n The following snippet shows the content type we're defining can:\n <ul>\n     <li>Be contained in a <code>space</code> or a <code>page</code></li>\n     <li>Have a child <code>comment</code> or a child <code>attachment</code></li>\n </ul>\n\n\n\n\n\n    {\n      \"bodyType\": \"storage\",\n      \"supportedContainerTypes\": [\n        \"space\",\n        \"page\"\n      ],\n      \"supportedChildTypes\": [\n        \"attachment\",\n        \"comment\"\n      ],\n      \"supportedSpacePermissions\": [],\n      \"preventDuplicateTitle\": false,\n      \"indexing\": {\n        \"enabled\": true\n      }\n    }\n\n\n\n\n\n <h3>Custom content example</h3>\n The following snippet shows the content type we're defining can:\n <ul>\n     <li>Be contained in a content with type <code>type1</code> or <code>type2</code>, defined in an add-on with the key <code>my-first-addon</code></li>\n     <li>Have a child of a content with type <code>type1</code> or <code>type2</code>, defined in an add-on with the key <code>my-second-addon</code></li>\n </ul>\n\n\n\n\n\n    {\n      \"bodyType\": \"storage\",\n      \"supportedContainerTypes\": [\n        \"ac:my-first-addon:type2\",\n        \"ac:my-first-addon:type1\"\n      ],\n      \"supportedChildTypes\": [\n        \"ac:my-second-addon:type1\",\n        \"ac:my-second-addon:type2\"\n      ],\n      \"supportedSpacePermissions\": [],\n      \"preventDuplicateTitle\": false,\n      \"indexing\": {\n        \"enabled\": true\n      }\n    }\n\n\n\n\n <h3>Raw body type custom content example</h3>\n You can define custom content to support a content body with a type of <code>raw</code>.<br>\n This is useful when you want to store, for example, stringified JSON to the content.\n\n\n\n\n\n    {\n      \"bodyType\": \"raw\",\n      \"supportedContainerTypes\": [\n        \"space\"\n      ],\n      \"supportedChildTypes\": [],\n      \"supportedSpacePermissions\": [],\n      \"preventDuplicateTitle\": false,\n      \"indexing\": {\n        \"enabled\": true\n      }\n    }\n\n\n\n\n Content with a raw body looks like this:\n <pre><code>\n {\n     \"title\": \"My title\",\n     \"space\": {\"key\": \"DS\"},\n     \"type\": \"ac:add-on-key:module-key\",\n     \"body\": {\n         \"raw\": {\n             \"value\": \"{\\\"field\\\": \\\"value\\\"}\",\n             \"representation\": \"raw\"\n         }\n     }\n }\n </code></pre>\n\n"
    },
    "indexing": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "fieldDescription": "\n\nDefines whether this custom content should be indexed for site search.\n\n",
          "defaultValue": "true"
        }
      },
      "shortClassName": "customContentIndexingBean",
      "type": "object",
      "title": "Custom Content Indexing",
      "description": "\n\nDefines how this custom content will be indexed for site search\n\n\n\n\n\n    {\n      \"enabled\": true\n    }\n\n\n\n\n <h3>Search body content property</h3>\n <p>The <code>search body content property</code> allows add-on to hook into the mechanism by which Confluence populates its\n search index for site search. Each time custom content is created or updated in Confluence, the content that stored in\n the <code>ac:custom-content:search-body</code> content property will be added to the search index.\n The content of this property will also be used in displaying the excerpt text for search result.</p>\n\n <p>This is useful when the body of the custom content is not searchable, for example: JSON or binary data.\n The add-on can still provide meaningful search text for this content via storing the extracted information to\n <code>ac:custom-content:search-body</code> content property.</p>\n\n <p>Add-on developer should aggregate the information before storing to this content property if multiple entries needed.\n The data in this content property will gets indexed as is without any modification.</p>\n\n <p>Please consult <a href=\"https://developer.atlassian.com/confdev/confluence-rest-api/content-properties-in-the-rest-api\">Content Properties in the REST API</a>\n for how to store, modify and delete content property via REST API.</p>\n\n"
    },
    "autoconvert": {
      "properties": {
        "matchers": {
          "items": {
            "$ref": "#/definitions/matchers"
          },
          "maxItems": 200,
          "additionalItems": false,
          "uniqueItems": false,
          "type": "array",
          "fieldDescription": "\n\nThe list of patterns that define what URLs should be matched.\n\n"
        },
        "urlParameter": {
          "type": "string",
          "fieldDescription": "\n\nThe name of the macro parameter the matched url will be inserted into.\n\n"
        }
      },
      "required": [
        "urlParameter"
      ],
      "shortClassName": "autoconvertBean",
      "type": "object",
      "title": "Autoconvert",
      "description": "\n\nAutoconvert allows your macro to be inserted into the editor when a recognised URL is pasted in by the user.\n You define recognised URL patterns using 'matchers' which are registered in the editor when your add-on is installed.\n\n When the macro is created in the editor, the URL string that triggered the autoconvert will be captured and inserted\n as a parameter on the macro body. You must define the name of this parameter by providing a string value for 'urlParameter'.\n This allows you to access the URL that triggered the autoconvert.\n\n <h2>Example</h2>\n\n This example inserts a macro into the editor when a user pastes in certain simple Facebook links.\n\n\n\n\n\n    {\n      \"renderModes\": {},\n      \"url\": \"/dynamic-macro?url={url}\",\n      \"categories\": [],\n      \"outputType\": \"block\",\n      \"bodyType\": \"none\",\n      \"aliases\": [],\n      \"parameters\": [\n        {\n          \"identifier\": \"url\",\n          \"name\": {\n            \"value\": \"URL\"\n          },\n          \"type\": \"string\",\n          \"required\": false,\n          \"multiple\": false,\n          \"hidden\": false\n        }\n      ],\n      \"autoconvert\": {\n        \"urlParameter\": \"url\",\n        \"matchers\": [\n          {\n            \"pattern\": \"https://www.facebook.com/{}/about\"\n          },\n          {\n            \"pattern\": \"https://www.facebook.com/{}/music\"\n          },\n          {\n            \"pattern\": \"https://www.facebook.com/{}/movies/{}\"\n          }\n        ]\n      },\n      \"name\": {\n        \"value\": \"Dynamic Macro With Autoconvert\"\n      },\n      \"key\": \"dynamic-macro-with-autoconvert\"\n    }\n\n\n"
    },
    "imagePlaceholder": {
      "properties": {
        "applyChrome": {
          "type": "boolean",
          "fieldDescription": "\n\nSet to true if the image should have the macro placeholder chrome applied to it.\n\n",
          "defaultValue": "false"
        },
        "width": {
          "type": "integer",
          "fieldDescription": "\n\nThe width in pixels of the image placeholder. Defaults to the natural image width if not specified.\n\n"
        },
        "url": {
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nThe URL of the image placeholder. Your image placeholder needs to be hosted remotely at a web-accessible location.\n You can specify the URL as an absolute URL or relative to the add-on's base URL.<br>\n\n The url here doesn't support context parameters. However all the macro parameters will be passed as query parameters to the request.<br>\n You can use these parameters to dynamically generate the placeholder image.<br>\n\n Suppose you have a macro defined like this:\n\n\n\n\n\n    {\n      \"dynamicContentMacros\": {\n        \"renderModes\": {},\n        \"url\": \"/my-macro\",\n        \"categories\": [],\n        \"outputType\": \"block\",\n        \"bodyType\": \"none\",\n        \"aliases\": [],\n        \"parameters\": [\n          {\n            \"identifier\": \"param1\",\n            \"name\": {\n              \"value\": \"Parameter 1\"\n            },\n            \"type\": \"string\",\n            \"required\": false,\n            \"multiple\": false,\n            \"hidden\": false\n          },\n          {\n            \"identifier\": \"param2\",\n            \"name\": {\n              \"value\": \"Parameter 2\"\n            },\n            \"type\": \"string\",\n            \"required\": false,\n            \"multiple\": false,\n            \"hidden\": false\n          }\n        ],\n        \"imagePlaceholder\": {\n          \"url\": \"/images/placeholder.png\",\n          \"applyChrome\": false\n        },\n        \"name\": {\n          \"value\": \"My macro with placeholder\"\n        },\n        \"key\": \"my-macro-key\"\n      }\n    }\n\n\n\n\n The Confluence editor will pass the parameter values when requesting the placeholder image:\n <code>/images/placeholder.png?param1=value1&amp;param2=value2</code>\n\n"
        },
        "height": {
          "type": "integer",
          "fieldDescription": "\n\nThe height in pixels of the image placeholder. Defaults to the natural image height if not specified.\n\n"
        }
      },
      "required": [
        "url"
      ],
      "shortClassName": "imagePlaceholderBean",
      "type": "object",
      "title": "Image Placeholder",
      "description": "\n\nDefines a macro image placeholder to display in the Confluence editor.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"imagePlaceholder\": {\n        \"width\": 100,\n        \"height\": 25,\n        \"url\": \"/images/placeholder.png\",\n        \"applyChrome\": true\n      }\n    }\n\n\n"
    },
    "matchers": {
      "properties": {
        "pattern": {
          "maxLength": 1024,
          "type": "string",
          "fieldDescription": "\n\nThe pattern is a string that defines a single URL to match.\n\n"
        }
      },
      "required": [
        "pattern"
      ],
      "shortClassName": "matcherBean",
      "type": "object",
      "title": "Matcher",
      "description": "\n\nMatchers define a URL string as part of an Autoconvert definition.\n\n Wildcards (parts of the url that should always match, such as as a unique ID) can be defined using a single open and close\n curly bracket such as '{}'. Use a new brace pair for each separate wildcard.\n\n Keep in mind that you'll need to define a separate matcher for each relevant internet protocol (such as http vs https).\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"pattern\": \"https://www.facebook.com/{}/about\"\n    }\n\n\n"
    },
    "embeddedStaticContentMacroBean": {
      "properties": {
        "url": {
          "format": "uri-template",
          "type": "string",
          "fieldDescription": "\n\n"
        }
      },
      "required": [
        "url"
      ],
      "shortClassName": "embeddedStaticContentMacroBean",
      "type": "object",
      "title": "Embedded Static Content Macro",
      "description": "\n\nAn embedded reference to a static macro resource.  These macro definitions are a subset of\n a Static Content Macro, defining only what cannot be inferred from the containing dynamic macro.\n\n These embedded static content macros are used to define render mode mappings for your dynamic content macro.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dynamicContentMacros\": [\n          {\n            \"renderModes\": {\n              \"pdf\": {\n                \"url\": \"/render-map-pdf\"\n              },\n              \"default\": {\n                \"url\": \"/render-map-static\"\n              }\n            },\n            \"url\": \"/render-map?pageTitle={page.title}\",\n            \"categories\": [],\n            \"outputType\": \"block\",\n            \"bodyType\": \"none\",\n            \"aliases\": [],\n            \"name\": {\n              \"value\": \"Maps\"\n            },\n            \"key\": \"dynamic-macro-example\"\n          }\n        ]\n      }\n    }\n\n\n"
    },
    "headings": {
      "properties": {
        "color": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the headings of the content (HTML h1 to h6 tags).<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        }
      },
      "required": [
        "color"
      ],
      "shortClassName": "headingsBean",
      "type": "object",
      "title": "Headings",
      "description": "\n\nDefines styles to be applied on the headings of the content (HTML h1 to h6 tags).\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"color\": \"#333333\"\n    }\n\n\n"
    },
    "header": {
      "properties": {
        "button": {
          "$ref": "#/definitions/button",
          "fieldDescription": "\n\nDeclares styles to be applied on the button on the header\n\n"
        },
        "backgroundColor": {
          "pattern": "^#([\\da-fA-F]){3}$|^#([\\da-fA-F]){6}$|^rgb\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*\\)$|^rgba\\(\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*(0|[1-9]\\d?|1\\d\\d?|2[0-4]\\d|25[0-5])\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$|^rgb\\((\\d+)%,\\s*(\\d+)%,\\s*(\\d+)%\\)$|^hsl\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*\\)$|^hsla\\(\\s*(0|[1-9]\\d?|[12]\\d\\d|3[0-5]\\d)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0|[1-9]\\d?|100)%)\\s*,\\s*((0.[0-9]*)|[01])\\s*\\)$",
          "type": "string",
          "fieldDescription": "\n\nDeclares color to be applied on the header background.<br>\n The supported values include RGB(A), HSL(A), HEX codes, except for color names.<br>\n\n"
        },
        "primaryNavigation": {
          "$ref": "#/definitions/primaryNavigation",
          "fieldDescription": "\n\nDeclares styles to be applied on the primary navigation\n\n"
        },
        "search": {
          "$ref": "#/definitions/search",
          "fieldDescription": "\n\nDeclares styles to be applied on the search field\n\n"
        },
        "secondaryNavigation": {
          "$ref": "#/definitions/secondaryNavigation",
          "fieldDescription": "\n\nDeclares styles to be applied on the secondary navigation\n\n"
        }
      },
      "required": [
        "button",
        "backgroundColor",
        "primaryNavigation",
        "search",
        "secondaryNavigation"
      ],
      "shortClassName": "headerBean",
      "type": "object",
      "title": "Header",
      "description": "\n\nDefines styles to be applied on the header.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"backgroundColor\": \"#661F2D\",\n      \"button\": {\n        \"backgroundColor\": \"#894E59\",\n        \"color\": \"#FFFFFF\"\n      },\n      \"primaryNavigation\": {\n        \"hoverOrFocus\": {\n          \"backgroundColor\": \"#863647\",\n          \"color\": \"#FFFFFF\"\n        },\n        \"color\": \"#FFFFFF\"\n      },\n      \"secondaryNavigation\": {\n        \"hoverOrFocus\": {\n          \"backgroundColor\": \"#863647\",\n          \"color\": \"#FFFFFF\"\n        },\n        \"color\": \"#000000\"\n      },\n      \"search\": {\n        \"backgroundColor\": \"#9A636B\",\n        \"color\": \"#FFFFFF\"\n      }\n    }\n\n\n"
    },
    "vendor": {
      "properties": {
        "name": {
          "maxLength": 100,
          "type": "string",
          "fieldDescription": "\n\nThe name of the plugin vendor.\n Supply your name or the name of the company you work for.\n\n"
        },
        "url": {
          "maxLength": 200,
          "format": "uri",
          "type": "string",
          "fieldDescription": "\n\nThe url for the vendor's website\n\n"
        }
      },
      "shortClassName": "vendorBean",
      "type": "object",
      "title": "Plugin Vendor",
      "description": "\n\nGives basic information about the plugin vendor.\n\n <h2>Example</h2>\n\n\n\n\n\n    {\n      \"vendor\": {\n        \"name\": \"Atlassian\",\n        \"url\": \"http://www.atlassian.com\"\n      }\n    }\n\n\n"
    }
  }
}